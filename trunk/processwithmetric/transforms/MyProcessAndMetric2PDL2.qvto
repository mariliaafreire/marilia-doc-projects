modeltype PRO uses processModel('myModel');
modeltype JPDL uses jpdl31('urn:jbpm.org:jpdl-3.1');
modeltype MTRC uses MetricModel('Metrica');
	
transformation UMA2JPDL(in pro:PRO, in mt:MTRC ,out jpdl:JPDL);

main() {
	pro.rootObjects()[PRO::Process]->map Process2Process(mt);	 
}

/*****************
 *  MAPEAMENTOS  *
 *****************/

mapping PRO::Process::Process2Process(in met: MTRC) : JPDL::ProcessDefinitionType {
	
	name := self.name;
	//cria o nó inicial e final do processo
	
	    result.startState := object JPDL::StartStateType { 
				name := 'Inicio'; 
				
		};
		result.endState := object JPDL::EndStateType { 
				name := 'End'; 
				
		};
	
	taskNode := self.activity-> map Activity2TaskNode(self, met,result)-> asOrderedSet();
	
	self.activity-> map ligarAosJoinsAndStart(result)->asOrderedSet(); 
	
	 
}

mapping PRO::Activity::Activity2TaskNode(in epfSpec : PRO::Process,in met: MTRC, inout process : JPDL::ProcessDefinitionType) : JPDL::TaskNodeType {
	
		-- verifica a existencia de um no join como origem
			if (self.predecessor->size()>1) then{
			
			var join := object JPDL::JoinType {
				name := 'join' + self.name;
				transition := object JPDL::TransitionType{
					name := 'to_'+ self.name;
					to:= self.name;
				};
			};
			process.join += Sequence{join};
		}
		endif;
		
			
		
	name := self.name;
	
	//description := self.briefDescription;
	
	
	//transition += Sequence{t};
	
	transition := epfSpec.activity->map criarTransicoes(epfSpec,self);
	
	if(self.task->isEmpty())then{
		log('task is empty');
	    var t := object JPDL::TaskType {
	    	name := self.name;
	    };
	    result.task += Sequence{t};
	} else {
	     task := self.task-> map Task2Task(met)-> asOrderedSet();
	}endif;
	
	
	
	
	end{
		if (result.transition->size()>1)then{
			log('achou um fork');
			var i=1;
		
			epfSpec.activity->forEach (ativ) {
			 	ativ.predecessor->forEach (atividade | atividade.name = self.name) {
			 	result.transition->at(i).name := result.transition->at(i).name+(i.oclAsType(String));
			  	result.transition->at(i).to := ativ.name;
			  	
			  	i := i+1;
			  }
			 };			
			
			var no := object JPDL::ForkType {
					name := 'fork'+result.name;
					transition := result.transition;
				};
			
			process.fork+= Sequence{no};
		    
		    var forkT := object JPDL::TransitionType{
					name := 'forkTransition' + result.name;
					to := 'fork'+result.name;
			};
			result.transition += Sequence{forkT}
		
		}endif;	
	
	}
	
}
mapping PRO::Task::Task2Task(in met: MTRC):JPDL::TaskType{
  name := self.name;
  var metrics := met.objectsOfType(Metric); 	
  var nomeInput: String;
   
   metrics->forEach(ele) 
   { 		log(ele.begin + ' vs ' + self.name);
   			if(ele.form = 0)then{
   				result.blocking = true;
   			}endif;
            if(ele.begin.equalsIgnoreCase(self.name) or ele.endd.equalsIgnoreCase(self.name)) then {
   				result.event += Sequence {
   					object JPDL::EventType{
   					type:="task-end";
   					
   					action+=Sequence {
   						object JPDL::ActionType{
   							name:=ele.name;
   							
   						}
   					}
   						
   					}
   				}
   			} endif;
   };
}

mapping PRO::Activity::criarTransicoes(in epfSpec: PRO::Process,in atividade:PRO::Activity): JPDL::TransitionType
	when{self.name=atividade.name}{	
	log('criou transicao'+atividade.name);
	name := atividade.name+'Transition';
	to := getProximo(atividade.name,epfSpec);
	end{
	   	
	}
}



mapping PRO::Activity::ligarAosJoinsAndStart(inout process: JPDL::ProcessDefinitionType){
		if (self.predecessor->size()>1)then {
			self.predecessor->forEach (pred) {
				var i := 1;
			process.allInstances(JPDL::TaskNodeType)->forEach(ativ|ativ.name= self.name){//
				ativ.transition->at(i).name :=  'join' + self.name + 'transition';
				ativ.transition->at(i).to := 'join' + self.name;
				i := i+1;
			};
		  }
		}endif;
		
		// CRIA TRANSIÇÕES FROM STARTSTATE
		if (self.predecessor->isEmpty())then {
			var i := 1;
			process.allInstances(JPDL::StartStateType)->forEach(ativ){
			log('estado inicial');
			var trst := object JPDL::TransitionType {
				name := 'start' + self.name + 'transition';
				to := self.name;
			};
			ativ.transition += trst;
			}
		}endif;
	
}
/************
 *  QUERYS  *
 ************/
 
query getProximo(in atual : String, in epfSpec : PRO::Process) : String {
	var proximo := 'End';
	epfSpec.activity->forEach (ativ) { ativ.predecessor->forEach (atividade | atividade.name = atual) {  proximo = ativ.name;}};
	return proximo;
}
/**
query criarTransicao(in atual: PRO::Activity, in epfSpec: PRO::Process): Sequence {
	

	epfSpec.activity->forEach (ativ) { ativ.predecessor->forEach (atividade | atividade.name = atual) {  
	
	}};
	
	var t := object JPDL::TransitionType{
	name := atual.name+'Transition';
	
	to := getProximo(atual.name,epfSpec);
	};
	return t;
}*/