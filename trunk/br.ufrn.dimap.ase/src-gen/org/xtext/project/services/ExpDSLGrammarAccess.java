/*
* generated by Xtext
*/

package org.xtext.project.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsExperimentElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=ExperimentElement*;
		public ParserRule getRule() { return rule; }

		//elements+=ExperimentElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//ExperimentElement
		public RuleCall getElementsExperimentElementParserRuleCall_0() { return cElementsExperimentElementParserRuleCall_0; }
	}

	public class ExperimentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExperimentElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExperimentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cProcessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProcessProcessParserRuleCall_2_0 = (RuleCall)cProcessAssignment_2.eContents().get(0);
		private final Assignment cMetricsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetricsMetricsParserRuleCall_3_0 = (RuleCall)cMetricsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExperimentalPlanKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExperimentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExperimentsExperimentalPlanParserRuleCall_4_1_0 = (RuleCall)cExperimentsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGeneralQuestionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cQuestionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cQuestionQuestionsParserRuleCall_5_1_0 = (RuleCall)cQuestionAssignment_5_1.eContents().get(0);
		
		//ExperimentElement:
		//	"Experiment" name=STRING process+=Process* metrics+=Metrics* ("Experimental Plan" experiments+=ExperimentalPlan*)?
		//	("General Questions" question+=Questions*)?;
		public ParserRule getRule() { return rule; }

		//"Experiment" name=STRING process+=Process* metrics+=Metrics* ("Experimental Plan" experiments+=ExperimentalPlan*)?
		//("General Questions" question+=Questions*)?
		public Group getGroup() { return cGroup; }

		//"Experiment"
		public Keyword getExperimentKeyword_0() { return cExperimentKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//process+=Process*
		public Assignment getProcessAssignment_2() { return cProcessAssignment_2; }

		//Process
		public RuleCall getProcessProcessParserRuleCall_2_0() { return cProcessProcessParserRuleCall_2_0; }

		//metrics+=Metrics*
		public Assignment getMetricsAssignment_3() { return cMetricsAssignment_3; }

		//Metrics
		public RuleCall getMetricsMetricsParserRuleCall_3_0() { return cMetricsMetricsParserRuleCall_3_0; }

		//("Experimental Plan" experiments+=ExperimentalPlan*)?
		public Group getGroup_4() { return cGroup_4; }

		//"Experimental Plan"
		public Keyword getExperimentalPlanKeyword_4_0() { return cExperimentalPlanKeyword_4_0; }

		//experiments+=ExperimentalPlan*
		public Assignment getExperimentsAssignment_4_1() { return cExperimentsAssignment_4_1; }

		//ExperimentalPlan
		public RuleCall getExperimentsExperimentalPlanParserRuleCall_4_1_0() { return cExperimentsExperimentalPlanParserRuleCall_4_1_0; }

		//("General Questions" question+=Questions*)?
		public Group getGroup_5() { return cGroup_5; }

		//"General Questions"
		public Keyword getGeneralQuestionsKeyword_5_0() { return cGeneralQuestionsKeyword_5_0; }

		//question+=Questions*
		public Assignment getQuestionAssignment_5_1() { return cQuestionAssignment_5_1; }

		//Questions
		public RuleCall getQuestionQuestionsParserRuleCall_5_1_0() { return cQuestionQuestionsParserRuleCall_5_1_0; }
	}

	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActivitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActivitiesActivityParserRuleCall_2_0 = (RuleCall)cActivitiesAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////WorkbreakdownStructure	
		////artefatos, métricas para artefatos	
		//Process:
		//	"Process" name=STRING activities+=Activity* ";";
		public ParserRule getRule() { return rule; }

		//"Process" name=STRING activities+=Activity* ";"
		public Group getGroup() { return cGroup; }

		//"Process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//activities+=Activity*
		public Assignment getActivitiesAssignment_2() { return cActivitiesAssignment_2; }

		//Activity
		public RuleCall getActivitiesActivityParserRuleCall_2_0() { return cActivitiesActivityParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArtefactsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArtefactsArtefactParserRuleCall_2_1_0 = (RuleCall)cArtefactsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArtefactsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArtefactsArtefactParserRuleCall_3_1_0 = (RuleCall)cArtefactsAssignment_3_1.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cNextAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNextIDTerminalRuleCall_5_0 = (RuleCall)cNextAssignment_5.eContents().get(0);
		private final Assignment cRoleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRoleRoleParserRuleCall_6_0 = (RuleCall)cRoleAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cTasksAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_7_1_0 = (RuleCall)cTasksAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//Activity:
		//	"Activity" id=ID ("in" artefacts+=Artefact*)? ("out" artefacts+=Artefact*)? name=STRING next+=ID? role+=Role* ("{"
		//	tasks+=Task* "}")?;
		public ParserRule getRule() { return rule; }

		//"Activity" id=ID ("in" artefacts+=Artefact*)? ("out" artefacts+=Artefact*)? name=STRING next+=ID? role+=Role* ("{"
		//tasks+=Task* "}")?
		public Group getGroup() { return cGroup; }

		//"Activity"
		public Keyword getActivityKeyword_0() { return cActivityKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//("in" artefacts+=Artefact*)?
		public Group getGroup_2() { return cGroup_2; }

		//"in"
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }

		//artefacts+=Artefact*
		public Assignment getArtefactsAssignment_2_1() { return cArtefactsAssignment_2_1; }

		//Artefact
		public RuleCall getArtefactsArtefactParserRuleCall_2_1_0() { return cArtefactsArtefactParserRuleCall_2_1_0; }

		//("out" artefacts+=Artefact*)?
		public Group getGroup_3() { return cGroup_3; }

		//"out"
		public Keyword getOutKeyword_3_0() { return cOutKeyword_3_0; }

		//artefacts+=Artefact*
		public Assignment getArtefactsAssignment_3_1() { return cArtefactsAssignment_3_1; }

		//Artefact
		public RuleCall getArtefactsArtefactParserRuleCall_3_1_0() { return cArtefactsArtefactParserRuleCall_3_1_0; }

		//name=STRING
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_0() { return cNameSTRINGTerminalRuleCall_4_0; }

		//next+=ID?
		public Assignment getNextAssignment_5() { return cNextAssignment_5; }

		//ID
		public RuleCall getNextIDTerminalRuleCall_5_0() { return cNextIDTerminalRuleCall_5_0; }

		//role+=Role*
		public Assignment getRoleAssignment_6() { return cRoleAssignment_6; }

		//Role
		public RuleCall getRoleRoleParserRuleCall_6_0() { return cRoleRoleParserRuleCall_6_0; }

		//("{" tasks+=Task* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }

		//tasks+=Task*
		public Assignment getTasksAssignment_7_1() { return cTasksAssignment_7_1; }

		//Task
		public RuleCall getTasksTaskParserRuleCall_7_1_0() { return cTasksTaskParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_2() { return cRightCurlyBracketKeyword_7_2; }
	}

	public class ArtefactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Artefact");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Artefact:
		//	name=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Task:
		//	"Task" name=STRING ";";
		public ParserRule getRule() { return rule; }

		//"Task" name=STRING ";"
		public Group getGroup() { return cGroup; }

		//"Task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Role:
		//	"Role" name=STRING ";";
		public ParserRule getRule() { return rule; }

		//"Role" name=STRING ";"
		public Group getGroup() { return cGroup; }

		//"Role"
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ExperimentalPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExperimentalPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDesignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDesignTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cFactorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFactorFactorParserRuleCall_4_0 = (RuleCall)cFactorAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////CRD  Completely Randomized Design
		////RCBD  Randomized Complete Block Design
		////LS  Latin Square
		//ExperimentalPlan:
		//	"Design" name=STRING "type" type=DesignType factor+=Factor* ";";
		public ParserRule getRule() { return rule; }

		//"Design" name=STRING "type" type=DesignType factor+=Factor* ";"
		public Group getGroup() { return cGroup; }

		//"Design"
		public Keyword getDesignKeyword_0() { return cDesignKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//type=DesignType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//DesignType
		public RuleCall getTypeDesignTypeEnumRuleCall_3_0() { return cTypeDesignTypeEnumRuleCall_3_0; }

		//factor+=Factor*
		public Assignment getFactorAssignment_4() { return cFactorAssignment_4; }

		//Factor
		public RuleCall getFactorFactorParserRuleCall_4_0() { return cFactorFactorParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLevelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLevelLevelsParserRuleCall_2_0 = (RuleCall)cLevelAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Factor:
		//	"Factor" name=STRING level+=Levels* ";";
		public ParserRule getRule() { return rule; }

		//"Factor" name=STRING level+=Levels* ";"
		public Group getGroup() { return cGroup; }

		//"Factor"
		public Keyword getFactorKeyword_0() { return cFactorKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//level+=Levels*
		public Assignment getLevelAssignment_2() { return cLevelAssignment_2; }

		//Levels
		public RuleCall getLevelLevelsParserRuleCall_2_0() { return cLevelLevelsParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class LevelsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Levels");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Levels:
		//	"Level" name=STRING ";";
		public ParserRule getRule() { return rule; }

		//"Level" name=STRING ";"
		public Group getGroup() { return cGroup; }

		//"Level"
		public Keyword getLevelKeyword_0() { return cLevelKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class MetricsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metrics");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cRelatesKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRelatesToAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cRelatesToProcessCrossReference_0_2_0 = (CrossReference)cRelatesToAssignment_0_2.eContents().get(0);
		private final RuleCall cRelatesToProcessSTRINGTerminalRuleCall_0_2_0_1 = (RuleCall)cRelatesToProcessCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cDescriptionKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_3_1_0 = (RuleCall)cDescriptionAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cTypeKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cTypeAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cTypeMetricTypeEnumRuleCall_0_4_1_0 = (RuleCall)cTypeAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cFormKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cFormAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cFormColectTypeEnumRuleCall_0_5_1_0 = (RuleCall)cFormAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cIdKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cIdAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cIdSTRINGTerminalRuleCall_0_6_1_0 = (RuleCall)cIdAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_0_7 = (Group)cGroup_0.eContents().get(7);
		private final Keyword cUnitKeyword_0_7_0 = (Keyword)cGroup_0_7.eContents().get(0);
		private final Assignment cUnitAssignment_0_7_1 = (Assignment)cGroup_0_7.eContents().get(1);
		private final RuleCall cUnitMetricUnitEnumRuleCall_0_7_1_0 = (RuleCall)cUnitAssignment_0_7_1.eContents().get(0);
		private final Assignment cDetailsAssignment_0_8 = (Assignment)cGroup_0.eContents().get(8);
		private final RuleCall cDetailsActivityMetricParserRuleCall_0_8_0 = (RuleCall)cDetailsAssignment_0_8.eContents().get(0);
		private final RuleCall cTaskMetricParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArtefactMetricParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////Metric Definition	
		//Metrics:
		//	name=STRING "relates" relatesTo=[Process|STRING] ("description" description=STRING) ("type" type=MetricType) ("form"
		//	form=ColectType)? ("id" id=STRING) ("unit" unit=MetricUnit)? details=ActivityMetric | TaskMetric | ArtefactMetric;
		public ParserRule getRule() { return rule; }

		//name=STRING "relates" relatesTo=[Process|STRING] ("description" description=STRING) ("type" type=MetricType) ("form"
		//form=ColectType)? ("id" id=STRING) ("unit" unit=MetricUnit)? details=ActivityMetric | TaskMetric | ArtefactMetric
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=STRING "relates" relatesTo=[Process|STRING] ("description" description=STRING) ("type" type=MetricType) ("form"
		//form=ColectType)? ("id" id=STRING) ("unit" unit=MetricUnit)? details=ActivityMetric
		public Group getGroup_0() { return cGroup_0; }

		//name=STRING
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0_0() { return cNameSTRINGTerminalRuleCall_0_0_0; }

		//"relates"
		public Keyword getRelatesKeyword_0_1() { return cRelatesKeyword_0_1; }

		//relatesTo=[Process|STRING]
		public Assignment getRelatesToAssignment_0_2() { return cRelatesToAssignment_0_2; }

		//[Process|STRING]
		public CrossReference getRelatesToProcessCrossReference_0_2_0() { return cRelatesToProcessCrossReference_0_2_0; }

		//STRING
		public RuleCall getRelatesToProcessSTRINGTerminalRuleCall_0_2_0_1() { return cRelatesToProcessSTRINGTerminalRuleCall_0_2_0_1; }

		//"description" description=STRING
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"description"
		public Keyword getDescriptionKeyword_0_3_0() { return cDescriptionKeyword_0_3_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_0_3_1() { return cDescriptionAssignment_0_3_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_0_3_1_0; }

		//"type" type=MetricType
		public Group getGroup_0_4() { return cGroup_0_4; }

		//"type"
		public Keyword getTypeKeyword_0_4_0() { return cTypeKeyword_0_4_0; }

		//type=MetricType
		public Assignment getTypeAssignment_0_4_1() { return cTypeAssignment_0_4_1; }

		//MetricType
		public RuleCall getTypeMetricTypeEnumRuleCall_0_4_1_0() { return cTypeMetricTypeEnumRuleCall_0_4_1_0; }

		//("form" form=ColectType)?
		public Group getGroup_0_5() { return cGroup_0_5; }

		//"form"
		public Keyword getFormKeyword_0_5_0() { return cFormKeyword_0_5_0; }

		//form=ColectType
		public Assignment getFormAssignment_0_5_1() { return cFormAssignment_0_5_1; }

		//ColectType
		public RuleCall getFormColectTypeEnumRuleCall_0_5_1_0() { return cFormColectTypeEnumRuleCall_0_5_1_0; }

		//"id" id=STRING
		public Group getGroup_0_6() { return cGroup_0_6; }

		//"id"
		public Keyword getIdKeyword_0_6_0() { return cIdKeyword_0_6_0; }

		//id=STRING
		public Assignment getIdAssignment_0_6_1() { return cIdAssignment_0_6_1; }

		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_0_6_1_0() { return cIdSTRINGTerminalRuleCall_0_6_1_0; }

		//("unit" unit=MetricUnit)?
		public Group getGroup_0_7() { return cGroup_0_7; }

		//"unit"
		public Keyword getUnitKeyword_0_7_0() { return cUnitKeyword_0_7_0; }

		//unit=MetricUnit
		public Assignment getUnitAssignment_0_7_1() { return cUnitAssignment_0_7_1; }

		//MetricUnit
		public RuleCall getUnitMetricUnitEnumRuleCall_0_7_1_0() { return cUnitMetricUnitEnumRuleCall_0_7_1_0; }

		//details=ActivityMetric
		public Assignment getDetailsAssignment_0_8() { return cDetailsAssignment_0_8; }

		//ActivityMetric
		public RuleCall getDetailsActivityMetricParserRuleCall_0_8_0() { return cDetailsActivityMetricParserRuleCall_0_8_0; }

		//TaskMetric
		public RuleCall getTaskMetricParserRuleCall_1() { return cTaskMetricParserRuleCall_1; }

		//ArtefactMetric
		public RuleCall getArtefactMetricParserRuleCall_2() { return cArtefactMetricParserRuleCall_2; }
	}

	public class ActivityMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActivityMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cActivityBeginKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cActivityBeginAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cActivityBeginSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cActivityBeginAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cActivityEndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActivityEndAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActivityEndSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cActivityEndAssignment_1_1.eContents().get(0);
		
		//ActivityMetric:
		//	("activityBegin" activityBegin=STRING) ("activityEnd" activityEnd=STRING);
		public ParserRule getRule() { return rule; }

		//("activityBegin" activityBegin=STRING) ("activityEnd" activityEnd=STRING)
		public Group getGroup() { return cGroup; }

		//"activityBegin" activityBegin=STRING
		public Group getGroup_0() { return cGroup_0; }

		//"activityBegin"
		public Keyword getActivityBeginKeyword_0_0() { return cActivityBeginKeyword_0_0; }

		//activityBegin=STRING
		public Assignment getActivityBeginAssignment_0_1() { return cActivityBeginAssignment_0_1; }

		//STRING
		public RuleCall getActivityBeginSTRINGTerminalRuleCall_0_1_0() { return cActivityBeginSTRINGTerminalRuleCall_0_1_0; }

		//"activityEnd" activityEnd=STRING
		public Group getGroup_1() { return cGroup_1; }

		//"activityEnd"
		public Keyword getActivityEndKeyword_1_0() { return cActivityEndKeyword_1_0; }

		//activityEnd=STRING
		public Assignment getActivityEndAssignment_1_1() { return cActivityEndAssignment_1_1; }

		//STRING
		public RuleCall getActivityEndSTRINGTerminalRuleCall_1_1_0() { return cActivityEndSTRINGTerminalRuleCall_1_1_0; }
	}

	public class TaskMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivitiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActivitiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActivitiesSTRINGTerminalRuleCall_1_0 = (RuleCall)cActivitiesAssignment_1.eContents().get(0);
		
		//TaskMetric:
		//	"activities" activities=STRING;
		public ParserRule getRule() { return rule; }

		//"activities" activities=STRING
		public Group getGroup() { return cGroup; }

		//"activities"
		public Keyword getActivitiesKeyword_0() { return cActivitiesKeyword_0; }

		//activities=STRING
		public Assignment getActivitiesAssignment_1() { return cActivitiesAssignment_1; }

		//STRING
		public RuleCall getActivitiesSTRINGTerminalRuleCall_1_0() { return cActivitiesSTRINGTerminalRuleCall_1_0; }
	}

	public class ArtefactMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArtefactMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cArtefactAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cArtefactArtefactCrossReference_1_0 = (CrossReference)cArtefactAssignment_1.eContents().get(0);
		private final RuleCall cArtefactArtefactSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cArtefactArtefactCrossReference_1_0.eContents().get(1);
		
		//ArtefactMetric:
		//	name=STRING artefact=[Artefact|STRING];
		public ParserRule getRule() { return rule; }

		//name=STRING artefact=[Artefact|STRING]
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//artefact=[Artefact|STRING]
		public Assignment getArtefactAssignment_1() { return cArtefactAssignment_1; }

		//[Artefact|STRING]
		public CrossReference getArtefactArtefactCrossReference_1_0() { return cArtefactArtefactCrossReference_1_0; }

		//STRING
		public RuleCall getArtefactArtefactSTRINGTerminalRuleCall_1_0_1() { return cArtefactArtefactSTRINGTerminalRuleCall_1_0_1; }
	}

	public class QuestionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Questions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeAnswerTypeEnumRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIdKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIdAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_4_1_0 = (RuleCall)cIdAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRequiredKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReqAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReqINTTerminalRuleCall_5_1_0 = (RuleCall)cReqAssignment_5_1.eContents().get(0);
		private final Assignment cAlternativesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAlternativesAlternativesParserRuleCall_6_0 = (RuleCall)cAlternativesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Questions:
		//	name=STRING "{" ("description" description=STRING) ("type" type=AnswerType) ("id" id=ID) ("required" req=INT)?
		//	alternatives+=Alternatives* "}";
		public ParserRule getRule() { return rule; }

		//name=STRING "{" ("description" description=STRING) ("type" type=AnswerType) ("id" id=ID) ("required" req=INT)?
		//alternatives+=Alternatives* "}"
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"description" description=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"description"
		public Keyword getDescriptionKeyword_2_0() { return cDescriptionKeyword_2_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }

		//"type" type=AnswerType
		public Group getGroup_3() { return cGroup_3; }

		//"type"
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }

		//type=AnswerType
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//AnswerType
		public RuleCall getTypeAnswerTypeEnumRuleCall_3_1_0() { return cTypeAnswerTypeEnumRuleCall_3_1_0; }

		//"id" id=ID
		public Group getGroup_4() { return cGroup_4; }

		//"id"
		public Keyword getIdKeyword_4_0() { return cIdKeyword_4_0; }

		//id=ID
		public Assignment getIdAssignment_4_1() { return cIdAssignment_4_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_4_1_0() { return cIdIDTerminalRuleCall_4_1_0; }

		//("required" req=INT)?
		public Group getGroup_5() { return cGroup_5; }

		//"required"
		public Keyword getRequiredKeyword_5_0() { return cRequiredKeyword_5_0; }

		//req=INT
		public Assignment getReqAssignment_5_1() { return cReqAssignment_5_1; }

		//INT
		public RuleCall getReqINTTerminalRuleCall_5_1_0() { return cReqINTTerminalRuleCall_5_1_0; }

		//alternatives+=Alternatives*
		public Assignment getAlternativesAssignment_6() { return cAlternativesAssignment_6; }

		//Alternatives
		public RuleCall getAlternativesAlternativesParserRuleCall_6_0() { return cAlternativesAlternativesParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class AlternativesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternatives");
		private final Assignment cDescriptionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0 = (RuleCall)cDescriptionAssignment.eContents().get(0);
		
		//Alternatives:
		//	description=STRING;
		public ParserRule getRule() { return rule; }

		//description=STRING
		public Assignment getDescriptionAssignment() { return cDescriptionAssignment; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0() { return cDescriptionSTRINGTerminalRuleCall_0; }
	}
	
	
	public class DesignTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DesignType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCDREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCDRCRDCompletelyRandomizedDesignKeyword_0_0 = (Keyword)cCDREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRCDBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRCDBRCBDRandomizedCompleteBlockDesignKeyword_1_0 = (Keyword)cRCDBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLSLSLatinSquareKeyword_2_0 = (Keyword)cLSEnumLiteralDeclaration_2.eContents().get(0);
		
		////Experimental Design
		//enum DesignType:
		//	CDR="CRD  Completely Randomized Design" | RCDB="RCBD  Randomized Complete Block Design" | LS="LS  Latin Square";
		public EnumRule getRule() { return rule; }

		//CDR="CRD  Completely Randomized Design" | RCDB="RCBD  Randomized Complete Block Design" | LS="LS  Latin Square"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CDR="CRD  Completely Randomized Design"
		public EnumLiteralDeclaration getCDREnumLiteralDeclaration_0() { return cCDREnumLiteralDeclaration_0; }

		//"CRD  Completely Randomized Design"
		public Keyword getCDRCRDCompletelyRandomizedDesignKeyword_0_0() { return cCDRCRDCompletelyRandomizedDesignKeyword_0_0; }

		//RCDB="RCBD  Randomized Complete Block Design"
		public EnumLiteralDeclaration getRCDBEnumLiteralDeclaration_1() { return cRCDBEnumLiteralDeclaration_1; }

		//"RCBD  Randomized Complete Block Design"
		public Keyword getRCDBRCBDRandomizedCompleteBlockDesignKeyword_1_0() { return cRCDBRCBDRandomizedCompleteBlockDesignKeyword_1_0; }

		//LS="LS  Latin Square"
		public EnumLiteralDeclaration getLSEnumLiteralDeclaration_2() { return cLSEnumLiteralDeclaration_2; }

		//"LS  Latin Square"
		public Keyword getLSLSLatinSquareKeyword_2_0() { return cLSLSLatinSquareKeyword_2_0; }
	}

	public class AnswerTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AnswerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cComboBoxEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cComboBoxComboBoxKeyword_0_0 = (Keyword)cComboBoxEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCheckBoxesEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCheckBoxesCheckBoxesKeyword_1_0 = (Keyword)cCheckBoxesEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOptionButtonsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOptionButtonsOptionButtonsKeyword_2_0 = (Keyword)cOptionButtonsEnumLiteralDeclaration_2.eContents().get(0);
		
		////Questions
		//enum AnswerType:
		//	ComboBox | CheckBoxes | OptionButtons;
		public EnumRule getRule() { return rule; }

		//ComboBox | CheckBoxes | OptionButtons
		public Alternatives getAlternatives() { return cAlternatives; }

		//ComboBox
		public EnumLiteralDeclaration getComboBoxEnumLiteralDeclaration_0() { return cComboBoxEnumLiteralDeclaration_0; }

		//"ComboBox"
		public Keyword getComboBoxComboBoxKeyword_0_0() { return cComboBoxComboBoxKeyword_0_0; }

		//CheckBoxes
		public EnumLiteralDeclaration getCheckBoxesEnumLiteralDeclaration_1() { return cCheckBoxesEnumLiteralDeclaration_1; }

		//"CheckBoxes"
		public Keyword getCheckBoxesCheckBoxesKeyword_1_0() { return cCheckBoxesCheckBoxesKeyword_1_0; }

		//OptionButtons
		public EnumLiteralDeclaration getOptionButtonsEnumLiteralDeclaration_2() { return cOptionButtonsEnumLiteralDeclaration_2; }

		//"OptionButtons"
		public Keyword getOptionButtonsOptionButtonsKeyword_2_0() { return cOptionButtonsOptionButtonsKeyword_2_0; }
	}

	public class MetricTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MetricType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHardDataEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHardDataHardDataKeyword_0_0 = (Keyword)cHardDataEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSoftDataEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSoftDataSoftDataKeyword_1_0 = (Keyword)cSoftDataEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNormalizedDataEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNormalizedDataNormalizedDataKeyword_2_0 = (Keyword)cNormalizedDataEnumLiteralDeclaration_2.eContents().get(0);
		
		//// Metrica
		//enum MetricType:
		//	hardData | softData | normalizedData;
		public EnumRule getRule() { return rule; }

		//hardData | softData | normalizedData
		public Alternatives getAlternatives() { return cAlternatives; }

		//hardData
		public EnumLiteralDeclaration getHardDataEnumLiteralDeclaration_0() { return cHardDataEnumLiteralDeclaration_0; }

		//"hardData"
		public Keyword getHardDataHardDataKeyword_0_0() { return cHardDataHardDataKeyword_0_0; }

		//softData
		public EnumLiteralDeclaration getSoftDataEnumLiteralDeclaration_1() { return cSoftDataEnumLiteralDeclaration_1; }

		//"softData"
		public Keyword getSoftDataSoftDataKeyword_1_0() { return cSoftDataSoftDataKeyword_1_0; }

		//normalizedData
		public EnumLiteralDeclaration getNormalizedDataEnumLiteralDeclaration_2() { return cNormalizedDataEnumLiteralDeclaration_2; }

		//"normalizedData"
		public Keyword getNormalizedDataNormalizedDataKeyword_2_0() { return cNormalizedDataNormalizedDataKeyword_2_0; }
	}

	public class ColectTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ColectType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cContinuousEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cContinuousContinuousKeyword_0_0 = (Keyword)cContinuousEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntercalatedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntercalatedIntercalatedKeyword_1_0 = (Keyword)cIntercalatedEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ColectType:
		//	continuous | intercalated;
		public EnumRule getRule() { return rule; }

		//continuous | intercalated
		public Alternatives getAlternatives() { return cAlternatives; }

		//continuous
		public EnumLiteralDeclaration getContinuousEnumLiteralDeclaration_0() { return cContinuousEnumLiteralDeclaration_0; }

		//"continuous"
		public Keyword getContinuousContinuousKeyword_0_0() { return cContinuousContinuousKeyword_0_0; }

		//intercalated
		public EnumLiteralDeclaration getIntercalatedEnumLiteralDeclaration_1() { return cIntercalatedEnumLiteralDeclaration_1; }

		//"intercalated"
		public Keyword getIntercalatedIntercalatedKeyword_1_0() { return cIntercalatedIntercalatedKeyword_1_0; }
	}

	public class MetricUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MetricUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinutesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinutesMinutesKeyword_0_0 = (Keyword)cMinutesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUcEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUcUcKeyword_1_0 = (Keyword)cUcEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MetricUnit:
		//	minutes | uc;
		public EnumRule getRule() { return rule; }

		//minutes | uc
		public Alternatives getAlternatives() { return cAlternatives; }

		//minutes
		public EnumLiteralDeclaration getMinutesEnumLiteralDeclaration_0() { return cMinutesEnumLiteralDeclaration_0; }

		//"minutes"
		public Keyword getMinutesMinutesKeyword_0_0() { return cMinutesMinutesKeyword_0_0; }

		//uc
		public EnumLiteralDeclaration getUcEnumLiteralDeclaration_1() { return cUcEnumLiteralDeclaration_1; }

		//"uc"
		public Keyword getUcUcKeyword_1_0() { return cUcUcKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private ExperimentElementElements pExperimentElement;
	private ProcessElements pProcess;
	private ActivityElements pActivity;
	private ArtefactElements pArtefact;
	private TaskElements pTask;
	private RoleElements pRole;
	private ExperimentalPlanElements pExperimentalPlan;
	private FactorElements pFactor;
	private LevelsElements pLevels;
	private MetricsElements pMetrics;
	private ActivityMetricElements pActivityMetric;
	private TaskMetricElements pTaskMetric;
	private ArtefactMetricElements pArtefactMetric;
	private QuestionsElements pQuestions;
	private AlternativesElements pAlternatives;
	private DesignTypeElements unknownRuleDesignType;
	private AnswerTypeElements unknownRuleAnswerType;
	private MetricTypeElements unknownRuleMetricType;
	private ColectTypeElements unknownRuleColectType;
	private MetricUnitElements unknownRuleMetricUnit;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=ExperimentElement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ExperimentElement:
	//	"Experiment" name=STRING process+=Process* metrics+=Metrics* ("Experimental Plan" experiments+=ExperimentalPlan*)?
	//	("General Questions" question+=Questions*)?;
	public ExperimentElementElements getExperimentElementAccess() {
		return (pExperimentElement != null) ? pExperimentElement : (pExperimentElement = new ExperimentElementElements());
	}
	
	public ParserRule getExperimentElementRule() {
		return getExperimentElementAccess().getRule();
	}

	////WorkbreakdownStructure	
	////artefatos, métricas para artefatos	
	//Process:
	//	"Process" name=STRING activities+=Activity* ";";
	public ProcessElements getProcessAccess() {
		return (pProcess != null) ? pProcess : (pProcess = new ProcessElements());
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	//Activity:
	//	"Activity" id=ID ("in" artefacts+=Artefact*)? ("out" artefacts+=Artefact*)? name=STRING next+=ID? role+=Role* ("{"
	//	tasks+=Task* "}")?;
	public ActivityElements getActivityAccess() {
		return (pActivity != null) ? pActivity : (pActivity = new ActivityElements());
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}

	//Artefact:
	//	name=STRING;
	public ArtefactElements getArtefactAccess() {
		return (pArtefact != null) ? pArtefact : (pArtefact = new ArtefactElements());
	}
	
	public ParserRule getArtefactRule() {
		return getArtefactAccess().getRule();
	}

	//Task:
	//	"Task" name=STRING ";";
	public TaskElements getTaskAccess() {
		return (pTask != null) ? pTask : (pTask = new TaskElements());
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}

	//Role:
	//	"Role" name=STRING ";";
	public RoleElements getRoleAccess() {
		return (pRole != null) ? pRole : (pRole = new RoleElements());
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	////CRD  Completely Randomized Design
	////RCBD  Randomized Complete Block Design
	////LS  Latin Square
	//ExperimentalPlan:
	//	"Design" name=STRING "type" type=DesignType factor+=Factor* ";";
	public ExperimentalPlanElements getExperimentalPlanAccess() {
		return (pExperimentalPlan != null) ? pExperimentalPlan : (pExperimentalPlan = new ExperimentalPlanElements());
	}
	
	public ParserRule getExperimentalPlanRule() {
		return getExperimentalPlanAccess().getRule();
	}

	//Factor:
	//	"Factor" name=STRING level+=Levels* ";";
	public FactorElements getFactorAccess() {
		return (pFactor != null) ? pFactor : (pFactor = new FactorElements());
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//Levels:
	//	"Level" name=STRING ";";
	public LevelsElements getLevelsAccess() {
		return (pLevels != null) ? pLevels : (pLevels = new LevelsElements());
	}
	
	public ParserRule getLevelsRule() {
		return getLevelsAccess().getRule();
	}

	////Metric Definition	
	//Metrics:
	//	name=STRING "relates" relatesTo=[Process|STRING] ("description" description=STRING) ("type" type=MetricType) ("form"
	//	form=ColectType)? ("id" id=STRING) ("unit" unit=MetricUnit)? details=ActivityMetric | TaskMetric | ArtefactMetric;
	public MetricsElements getMetricsAccess() {
		return (pMetrics != null) ? pMetrics : (pMetrics = new MetricsElements());
	}
	
	public ParserRule getMetricsRule() {
		return getMetricsAccess().getRule();
	}

	//ActivityMetric:
	//	("activityBegin" activityBegin=STRING) ("activityEnd" activityEnd=STRING);
	public ActivityMetricElements getActivityMetricAccess() {
		return (pActivityMetric != null) ? pActivityMetric : (pActivityMetric = new ActivityMetricElements());
	}
	
	public ParserRule getActivityMetricRule() {
		return getActivityMetricAccess().getRule();
	}

	//TaskMetric:
	//	"activities" activities=STRING;
	public TaskMetricElements getTaskMetricAccess() {
		return (pTaskMetric != null) ? pTaskMetric : (pTaskMetric = new TaskMetricElements());
	}
	
	public ParserRule getTaskMetricRule() {
		return getTaskMetricAccess().getRule();
	}

	//ArtefactMetric:
	//	name=STRING artefact=[Artefact|STRING];
	public ArtefactMetricElements getArtefactMetricAccess() {
		return (pArtefactMetric != null) ? pArtefactMetric : (pArtefactMetric = new ArtefactMetricElements());
	}
	
	public ParserRule getArtefactMetricRule() {
		return getArtefactMetricAccess().getRule();
	}

	//Questions:
	//	name=STRING "{" ("description" description=STRING) ("type" type=AnswerType) ("id" id=ID) ("required" req=INT)?
	//	alternatives+=Alternatives* "}";
	public QuestionsElements getQuestionsAccess() {
		return (pQuestions != null) ? pQuestions : (pQuestions = new QuestionsElements());
	}
	
	public ParserRule getQuestionsRule() {
		return getQuestionsAccess().getRule();
	}

	//Alternatives:
	//	description=STRING;
	public AlternativesElements getAlternativesAccess() {
		return (pAlternatives != null) ? pAlternatives : (pAlternatives = new AlternativesElements());
	}
	
	public ParserRule getAlternativesRule() {
		return getAlternativesAccess().getRule();
	}

	////Experimental Design
	//enum DesignType:
	//	CDR="CRD  Completely Randomized Design" | RCDB="RCBD  Randomized Complete Block Design" | LS="LS  Latin Square";
	public DesignTypeElements getDesignTypeAccess() {
		return (unknownRuleDesignType != null) ? unknownRuleDesignType : (unknownRuleDesignType = new DesignTypeElements());
	}
	
	public EnumRule getDesignTypeRule() {
		return getDesignTypeAccess().getRule();
	}

	////Questions
	//enum AnswerType:
	//	ComboBox | CheckBoxes | OptionButtons;
	public AnswerTypeElements getAnswerTypeAccess() {
		return (unknownRuleAnswerType != null) ? unknownRuleAnswerType : (unknownRuleAnswerType = new AnswerTypeElements());
	}
	
	public EnumRule getAnswerTypeRule() {
		return getAnswerTypeAccess().getRule();
	}

	//// Metrica
	//enum MetricType:
	//	hardData | softData | normalizedData;
	public MetricTypeElements getMetricTypeAccess() {
		return (unknownRuleMetricType != null) ? unknownRuleMetricType : (unknownRuleMetricType = new MetricTypeElements());
	}
	
	public EnumRule getMetricTypeRule() {
		return getMetricTypeAccess().getRule();
	}

	//enum ColectType:
	//	continuous | intercalated;
	public ColectTypeElements getColectTypeAccess() {
		return (unknownRuleColectType != null) ? unknownRuleColectType : (unknownRuleColectType = new ColectTypeElements());
	}
	
	public EnumRule getColectTypeRule() {
		return getColectTypeAccess().getRule();
	}

	//enum MetricUnit:
	//	minutes | uc;
	public MetricUnitElements getMetricUnitAccess() {
		return (unknownRuleMetricUnit != null) ? unknownRuleMetricUnit : (unknownRuleMetricUnit = new MetricUnitElements());
	}
	
	public EnumRule getMetricUnitRule() {
		return getMetricUnitAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
