grammar br.ufrn.dimap.ase.dsl.ExpDslv2 with org.eclipse.xtext.common.Terminals

generate expDslv2 "http://www.ufrn.br/dimap/ase/dsl/ExpDslv2"

Model:
	(elements+=ExperimentElement)*;

ExperimentElement:
	'Experiment' name=STRING
	 process+=Process*
	 metrics+=Metrics*
	('Experimental Plan' experiments+=ExperimentalPlan*)
    ('Questionnaires' questionnaire+=Questionnaire*)?
	 ;
	//WorkbreakdownStructure	
Process:
	'Process' name=ID ('to' treatment+=[Levels|QualifiedName]*)?'{'
	  ('Role' role += RoleType*)?
	 (activities+=Activity)*
	'}';

Activity:
	'Activity'
	name=ID 'description' description=STRING
	('to' next+=[Activity|QualifiedName]*)?	
	('Role' role += RoleType*)?
	('var' collectData+=[CollectedData|QualifiedName]*)?
	('artefacts' (artefacts+=Artefact)*)?
	('quest' questionnaire+=[Questionnaire|QualifiedName]*)?
	('{'
	 tasks+=Task*
	'}')?;
 
Task: 'Task' name=ID 'description' description=STRING
	  ('var' var+=[CollectedData|QualifiedName
	  ]*)?
      ('artefacts' (artefacts+=Artefact)*)?
      ('quest' questionnaire+=[Questionnaire|QualifiedName]*)?
	  ;

enum RoleType returns RoleType:
	participant = 'Participant'| researcher = 'Researcher'
;
Artefact:
	name = ID 'description' description=STRING 'type' type=ArtefactType;
	enum ArtefactType returns ArtefactType:
	in_ = 'input' | out_ = 'output' | inout_ = 'inoutput';

QualifiedName:
    ID ('.' ID)*;

//Metric Definition	
Metrics:
	'Metric' name=ID 'relates' relatesTo=[Process] '{'
		('description' description=STRING)
		detail+=Detail
	'}';
Detail:
	(TimeMetric|DataMetric);
TimeMetric:
	ActivityMetric|TaskMetric;	
ActivityMetric: {ActivityMetric}
	('activityBegin' activityBegin=[Activity|QualifiedName])
	('activityEnd' activityEnd=[Activity|QualifiedName])?;
TaskMetric: {TaskMetric} 
	'tasks' tasks+=[Task|QualifiedName]*;    
DataMetric:	{DataMetric} 
	('collectedData' collectedData+=CollectedData* ':' dataType+=DataType)? 
	('artefact' artefacts+=[Artefact|QualifiedName]*)?
	('quest' questionnaires+=[Questionnaire|QualifiedName]*)?;
CollectedData: name = ID;

enum DataType returns DataType:
	num = 'number' | text = 'text'
;

ExperimentalPlan: 
'Goals' '{'(goal+=Goal)*'}'
'Hypotheses' '{'(hypotheses+=Hypotheses)* '}'
'DesignOfExperiment' '=' type=DesignType '{'
		(parameter+=Parameter)*
		(dependentVariable+=DependentVariable)*
	    (factor+=Factor)*
'Statistical Analysis Technique' 
((tosubhypotheses+=[Subhypotheses|QualifiedName]* ':' Technique+=AnalysisTechiqueType*))*                               
'Internal Replication ' internalReplication=INT
'}';

Goal:  name=ID description=STRING;
Hypotheses: name=ID description=STRING type=HypothesisType 'from' fromGoal=[Goal|QualifiedName]
			 ('{'subhypotheses+=Subhypotheses*'}' )?;
Subhypotheses: 
(name=ID dependentVariable+=[DependentVariable|QualifiedName] '(' (levels+=[Levels|QualifiedName])*')' 
	operator=OperatorType 
	dependentVariable+=[DependentVariable|QualifiedName] '(' (levels+=[Levels|QualifiedName])*')')|
(name=ID '(' dependentVariable+=[DependentVariable|QualifiedName] 
	relation=RelationType 
	factor+=[Factor|QualifiedName]*')'
);
enum RelationType returns RelationType:
	isRelated = '=='| isNotRelated = '<>';
enum OperatorType returns OperatorType:
	equal = '='| different = '!='| more = '>' | less = '<' | moreEqual ='>=' | lessEqual = '<=';
Parameter:
	'Parameter' variable=ID '=' value=STRING;
DependentVariable:
	'Dependent Variable' name=ID description=STRING metrics+=[Metrics|QualifiedName]*;
Factor: 
	'Factor' name=ID 'isDesiredVariation' isDesiredVariation=('True'|'False') 
	('{' (level+=Levels)* '}')?;
//****
Levels:
	name=ID;
enum HypothesisType returns HypothesisType:
	null = 'null' | alternative = 'alternative';
enum DesignType returns DesignType:
	CDR = 'CRD - Completely Randomized Design' | 
	RCBD = 'RCBD - Randomized Complete Block Design' | 
	LS = 'LS - Latin Square' |
	other = 'Other';	
	
enum AnalysisTechiqueType returns AnalysisTechiqueType:
	chi2 = 'Chi-2' | binomialTest = 'Binomial Test'| tTest = 't-test' |	fTest = 'F-test' | McNemarTest = 'McNemar Test'|
	MannWhitney = 'Mann-Whitney' |	paired = 'Paired t-test' |	wilcoxon = 'Wilcoxon' |	signTest = 'Sign test' |
	anova = 'ANOVA' | kruskalWallis = 'Kruskal-Wallis'| others = 'Others'	
;

Questionnaire: 'Questionnaire' name=ID ( 'relates' relatesTo+=[Process]*)? 
			   ('type' questionnaireType=QuestionnaireType)? '{'
				(question+=Question)*'};';
				
enum QuestionnaireType returns QuestionnaireType:
	pre = 'Pre' | post = 'Post';
	
Question:
	name=ID '{'
	    ('description' description=STRING)
		('type' type=AnswerType)
		('required' req=INT )?
		('Alternatives' alternatives+=Alternatives*)?  
	'}';

Alternatives:
	'Option' description = STRING;
	
enum AnswerType returns AnswerType:
	Text='Text' | ParagraphText = 'ParagraphText' | MultipleChoice = 'MultipleChoice' 
	| ComboBox = 'ComboBox' | CheckBoxes = 'CheckBoxes' | Scale = 'Scale' | Grid = 'Grid';




	


