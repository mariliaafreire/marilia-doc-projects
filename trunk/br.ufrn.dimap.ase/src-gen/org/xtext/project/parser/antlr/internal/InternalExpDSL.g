/*
* generated by Xtext
*/
grammar InternalExpDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.project.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.project.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.project.services.ExpDSLGrammarAccess;

}

@parser::members {

 	private ExpDSLGrammarAccess grammarAccess;
 	
    public InternalExpDSLParser(TokenStream input, ExpDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ExpDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getElementsExperimentElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleExperimentElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"ExperimentElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleExperimentElement
entryRuleExperimentElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExperimentElementRule()); }
	 iv_ruleExperimentElement=ruleExperimentElement 
	 { $current=$iv_ruleExperimentElement.current; } 
	 EOF 
;

// Rule ExperimentElement
ruleExperimentElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Experiment' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExperimentElementAccess().getExperimentKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getExperimentElementAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentElementAccess().getProcessProcessParserRuleCall_2_0()); 
	    }
		lv_process_2_0=ruleProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentElementRule());
	        }
       		add(
       			$current, 
       			"process",
        		lv_process_2_0, 
        		"Process");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentElementAccess().getMetricsMetricsParserRuleCall_3_0()); 
	    }
		lv_metrics_3_0=ruleMetrics		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentElementRule());
	        }
       		add(
       			$current, 
       			"metrics",
        		lv_metrics_3_0, 
        		"Metrics");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_4='Experimental Plan' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExperimentElementAccess().getExperimentalPlanKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentElementAccess().getExperimentsExperimentalPlanParserRuleCall_4_1_0()); 
	    }
		lv_experiments_5_0=ruleExperimentalPlan		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentElementRule());
	        }
       		add(
       			$current, 
       			"experiments",
        		lv_experiments_5_0, 
        		"ExperimentalPlan");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_6='Questionnaires' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExperimentElementAccess().getQuestionnairesKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentElementAccess().getQuestionnaireQuestionnaireParserRuleCall_5_1_0()); 
	    }
		lv_questionnaire_7_0=ruleQuestionnaire		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentElementRule());
	        }
       		add(
       			$current, 
       			"questionnaire",
        		lv_questionnaire_7_0, 
        		"Questionnaire");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	 iv_ruleProcess=ruleProcess 
	 { $current=$iv_ruleProcess.current; } 
	 EOF 
;

// Rule Process
ruleProcess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Process' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcessAccess().getProcessKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProcessAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getActivitiesActivityParserRuleCall_3_0()); 
	    }
		lv_activities_3_0=ruleActivity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		add(
       			$current, 
       			"activities",
        		lv_activities_3_0, 
        		"Activity");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleActivity
entryRuleActivity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActivityRule()); }
	 iv_ruleActivity=ruleActivity 
	 { $current=$iv_ruleActivity.current; } 
	 EOF 
;

// Rule Activity
ruleActivity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Activity' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActivityAccess().getActivityKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getActivityAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActivityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getActivityAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActivityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActivityRule());
	        }
        }
	otherlv_3=RULE_STRING
	{
		newLeafNode(otherlv_3, grammarAccess.getActivityAccess().getNextActivityCrossReference_3_0()); 
	}

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getActivityAccess().getArtefactsArtefactParserRuleCall_4_0()); 
	    }
		lv_artefacts_4_0=ruleArtefact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActivityRule());
	        }
       		add(
       			$current, 
       			"artefacts",
        		lv_artefacts_4_0, 
        		"Artefact");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getActivityAccess().getRoleRoleParserRuleCall_5_0()); 
	    }
		lv_role_5_0=ruleRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActivityRule());
	        }
       		add(
       			$current, 
       			"role",
        		lv_role_5_0, 
        		"Role");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getActivityAccess().getLeftCurlyBracketKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActivityAccess().getTasksTaskParserRuleCall_6_1_0()); 
	    }
		lv_tasks_7_0=ruleTask		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActivityRule());
	        }
       		add(
       			$current, 
       			"tasks",
        		lv_tasks_7_0, 
        		"Task");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getActivityAccess().getRightCurlyBracketKeyword_6_2());
    }
)?)
;





// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	 iv_ruleTask=ruleTask 
	 { $current=$iv_ruleTask.current; } 
	 EOF 
;

// Rule Task
ruleTask returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Task' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTaskKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTaskAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='description' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTaskAccess().getDescriptionKeyword_2());
    }
(
(
		lv_description_3_0=RULE_STRING
		{
			newLeafNode(lv_description_3_0, grammarAccess.getTaskAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_3_0, 
        		"STRING");
	    }

)
)(	otherlv_4='artefacts' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTaskAccess().getArtefactsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getArtefactsArtefactParserRuleCall_4_1_0()); 
	    }
		lv_artefacts_5_0=ruleArtefact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"artefacts",
        		lv_artefacts_5_0, 
        		"Artefact");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getRoleRoleParserRuleCall_5_0()); 
	    }
		lv_role_6_0=ruleRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"role",
        		lv_role_6_0, 
        		"Role");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTaskAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	 iv_ruleRole=ruleRole 
	 { $current=$iv_ruleRole.current; } 
	 EOF 
;

// Rule Role
ruleRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Role' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRoleAccess().getRoleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRoleAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRoleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRoleAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleArtefact
entryRuleArtefact returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArtefactRule()); }
	 iv_ruleArtefact=ruleArtefact 
	 { $current=$iv_ruleArtefact.current; } 
	 EOF 
;

// Rule Artefact
ruleArtefact returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='artefact' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArtefactAccess().getArtefactKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getArtefactAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArtefactRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='description' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArtefactAccess().getDescriptionKeyword_2());
    }
(
(
		lv_description_3_0=RULE_STRING
		{
			newLeafNode(lv_description_3_0, grammarAccess.getArtefactAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArtefactRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_3_0, 
        		"STRING");
	    }

)
)	otherlv_4='type' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArtefactAccess().getTypeKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArtefactAccess().getTypeArtefactTypeEnumRuleCall_5_0()); 
	    }
		lv_type_5_0=ruleArtefactType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtefactRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"ArtefactType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArtefactAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleMetrics
entryRuleMetrics returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetricsRule()); }
	 iv_ruleMetrics=ruleMetrics 
	 { $current=$iv_ruleMetrics.current; } 
	 EOF 
;

// Rule Metrics
ruleMetrics returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Metric' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMetricsAccess().getMetricKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMetricsAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetricsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='relates' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMetricsAccess().getRelatesKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetricsRule());
	        }
        }
	otherlv_3=RULE_STRING
	{
		newLeafNode(otherlv_3, grammarAccess.getMetricsAccess().getRelatesToProcessCrossReference_3_0()); 
	}

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMetricsAccess().getLeftCurlyBracketKeyword_4());
    }
(	otherlv_5='description' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMetricsAccess().getDescriptionKeyword_5_0());
    }
(
(
		lv_description_6_0=RULE_STRING
		{
			newLeafNode(lv_description_6_0, grammarAccess.getMetricsAccess().getDescriptionSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetricsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_6_0, 
        		"STRING");
	    }

)
))(	otherlv_7='form' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMetricsAccess().getFormKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetricsAccess().getFormColectTypeEnumRuleCall_6_1_0()); 
	    }
		lv_form_8_0=ruleColectType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetricsRule());
	        }
       		set(
       			$current, 
       			"form",
        		lv_form_8_0, 
        		"ColectType");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='unit' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMetricsAccess().getUnitKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMetricsAccess().getUnitMetricUnitEnumRuleCall_7_1_0()); 
	    }
		lv_unit_10_0=ruleMetricUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetricsRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_10_0, 
        		"MetricUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getMetricsAccess().getDetailDetailParserRuleCall_8_0()); 
	    }
		lv_detail_11_0=ruleDetail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetricsRule());
	        }
       		add(
       			$current, 
       			"detail",
        		lv_detail_11_0, 
        		"Detail");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMetricsAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleDetail
entryRuleDetail returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDetailRule()); }
	 iv_ruleDetail=ruleDetail 
	 { $current=$iv_ruleDetail.current; } 
	 EOF 
;

// Rule Detail
ruleDetail returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDetailAccess().getActivityMetricParserRuleCall_0()); 
    }
    this_ActivityMetric_0=ruleActivityMetric
    { 
        $current = $this_ActivityMetric_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDetailAccess().getTaskMetricParserRuleCall_1()); 
    }
    this_TaskMetric_1=ruleTaskMetric
    { 
        $current = $this_TaskMetric_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDetailAccess().getArtefactMetricParserRuleCall_2()); 
    }
    this_ArtefactMetric_2=ruleArtefactMetric
    { 
        $current = $this_ArtefactMetric_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleActivityMetric
entryRuleActivityMetric returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActivityMetricRule()); }
	 iv_ruleActivityMetric=ruleActivityMetric 
	 { $current=$iv_ruleActivityMetric.current; } 
	 EOF 
;

// Rule ActivityMetric
ruleActivityMetric returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='activityBegin' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActivityMetricAccess().getActivityBeginKeyword_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActivityMetricRule());
	        }
        }
	otherlv_1=RULE_STRING
	{
		newLeafNode(otherlv_1, grammarAccess.getActivityMetricAccess().getActivityBeginActivityCrossReference_0_1_0()); 
	}

)
))(	otherlv_2='activityEnd' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActivityMetricAccess().getActivityEndKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActivityMetricRule());
	        }
        }
	otherlv_3=RULE_STRING
	{
		newLeafNode(otherlv_3, grammarAccess.getActivityMetricAccess().getActivityEndActivityCrossReference_1_1_0()); 
	}

)
))?)
;





// Entry rule entryRuleTaskMetric
entryRuleTaskMetric returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskMetricRule()); }
	 iv_ruleTaskMetric=ruleTaskMetric 
	 { $current=$iv_ruleTaskMetric.current; } 
	 EOF 
;

// Rule TaskMetric
ruleTaskMetric returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='tasks' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTaskMetricAccess().getTasksKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskMetricRule());
	        }
        }
	otherlv_1=RULE_STRING
	{
		newLeafNode(otherlv_1, grammarAccess.getTaskMetricAccess().getTasksTaskCrossReference_1_0()); 
	}

)
)*)
;





// Entry rule entryRuleArtefactMetric
entryRuleArtefactMetric returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArtefactMetricRule()); }
	 iv_ruleArtefactMetric=ruleArtefactMetric 
	 { $current=$iv_ruleArtefactMetric.current; } 
	 EOF 
;

// Rule ArtefactMetric
ruleArtefactMetric returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='artefacts' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArtefactMetricAccess().getArtefactsKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getArtefactMetricAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArtefactMetricRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArtefactMetricRule());
	        }
        }
	otherlv_2=RULE_STRING
	{
		newLeafNode(otherlv_2, grammarAccess.getArtefactMetricAccess().getArtefactsArtefactCrossReference_2_0()); 
	}

)
)*)
;





// Entry rule entryRuleExperimentalPlan
entryRuleExperimentalPlan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExperimentalPlanRule()); }
	 iv_ruleExperimentalPlan=ruleExperimentalPlan 
	 { $current=$iv_ruleExperimentalPlan.current; } 
	 EOF 
;

// Rule ExperimentalPlan
ruleExperimentalPlan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Design' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExperimentalPlanAccess().getDesignKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getExperimentalPlanAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentalPlanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='type' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExperimentalPlanAccess().getTypeKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getTypeDesignTypeEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleDesignType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentalPlanRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"DesignType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExperimentalPlanAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getParameterParameterParserRuleCall_5_0()); 
	    }
		lv_parameter_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentalPlanRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getFactorFactorParserRuleCall_6_0()); 
	    }
		lv_factor_6_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentalPlanRule());
	        }
       		add(
       			$current, 
       			"factor",
        		lv_factor_6_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='Internal Replication ' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExperimentalPlanAccess().getInternalReplicationKeyword_7());
    }
(
(
		lv_internalReplication_8_0=RULE_INT
		{
			newLeafNode(lv_internalReplication_8_0, grammarAccess.getExperimentalPlanAccess().getInternalReplicationINTTerminalRuleCall_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentalPlanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"internalReplication",
        		lv_internalReplication_8_0, 
        		"INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getLinkLinkParserRuleCall_9_0()); 
	    }
		lv_link_9_0=ruleLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentalPlanRule());
	        }
       		add(
       			$current, 
       			"link",
        		lv_link_9_0, 
        		"Link");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getExperimentalPlanAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Parameter' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getParameterKeyword_0());
    }
(
(
		lv_variable_1_0=RULE_STRING
		{
			newLeafNode(lv_variable_1_0, grammarAccess.getParameterAccess().getVariableSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_value_3_0=RULE_STRING
		{
			newLeafNode(lv_value_3_0, grammarAccess.getParameterAccess().getValueSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	 iv_ruleFactor=ruleFactor 
	 { $current=$iv_ruleFactor.current; } 
	 EOF 
;

// Rule Factor
ruleFactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Factor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFactorAccess().getFactorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFactorAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='isDesiredVariation' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFactorAccess().getIsDesiredVariationKeyword_2());
    }
(
(
(
		lv_isDesiredVariation_3_1=	'True' 
    {
        newLeafNode(lv_isDesiredVariation_3_1, grammarAccess.getFactorAccess().getIsDesiredVariationTrueKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed($current, "isDesiredVariation", lv_isDesiredVariation_3_1, null);
	    }

    |		lv_isDesiredVariation_3_2=	'False' 
    {
        newLeafNode(lv_isDesiredVariation_3_2, grammarAccess.getFactorAccess().getIsDesiredVariationFalseKeyword_3_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed($current, "isDesiredVariation", lv_isDesiredVariation_3_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getLevelLevelsParserRuleCall_4_0()); 
	    }
		lv_level_4_0=ruleLevels		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		add(
       			$current, 
       			"level",
        		lv_level_4_0, 
        		"Levels");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFactorAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleLevels
entryRuleLevels returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLevelsRule()); }
	 iv_ruleLevels=ruleLevels 
	 { $current=$iv_ruleLevels.current; } 
	 EOF 
;

// Rule Levels
ruleLevels returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Level' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLevelsAccess().getLevelKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLevelsAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLevelsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLevelsAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleLink
entryRuleLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkRule()); }
	 iv_ruleLink=ruleLink 
	 { $current=$iv_ruleLink.current; } 
	 EOF 
;

// Rule Link
ruleLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Link' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinkAccess().getLinkKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkRule());
	        }
        }
	otherlv_1=RULE_STRING
	{
		newLeafNode(otherlv_1, grammarAccess.getLinkAccess().getProcedureProcessCrossReference_1_0()); 
	}

)
)	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLinkAccess().getToKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkRule());
	        }
        }
	otherlv_3=RULE_STRING
	{
		newLeafNode(otherlv_3, grammarAccess.getLinkAccess().getTreatmentLevelsCrossReference_3_0()); 
	}

)
)*)
;





// Entry rule entryRuleQuestionnaire
entryRuleQuestionnaire returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionnaireRule()); }
	 iv_ruleQuestionnaire=ruleQuestionnaire 
	 { $current=$iv_ruleQuestionnaire.current; } 
	 EOF 
;

// Rule Questionnaire
ruleQuestionnaire returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Questionnaire' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuestionnaireAccess().getQuestionnaireKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getQuestionnaireAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionnaireRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)(	otherlv_2='relates' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuestionnaireAccess().getRelatesKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionnaireRule());
	        }
        }
	otherlv_3=RULE_STRING
	{
		newLeafNode(otherlv_3, grammarAccess.getQuestionnaireAccess().getRelatesToProcessCrossReference_2_1_0()); 
	}

)
)*)?	otherlv_4='type' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuestionnaireAccess().getTypeKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionnaireAccess().getQuestionnaireTypeQuestionnaireTypeEnumRuleCall_4_0()); 
	    }
		lv_questionnaireType_5_0=ruleQuestionnaireType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionnaireRule());
	        }
       		set(
       			$current, 
       			"questionnaireType",
        		lv_questionnaireType_5_0, 
        		"QuestionnaireType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQuestionnaireAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionnaireAccess().getQuestionQuestionParserRuleCall_6_0()); 
	    }
		lv_question_7_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionnaireRule());
	        }
       		add(
       			$current, 
       			"question",
        		lv_question_7_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='};' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getQuestionnaireAccess().getRightCurlyBracketSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getQuestionAccess().getNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='description' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuestionAccess().getDescriptionKeyword_2_0());
    }
(
(
		lv_description_3_0=RULE_STRING
		{
			newLeafNode(lv_description_3_0, grammarAccess.getQuestionAccess().getDescriptionSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_3_0, 
        		"STRING");
	    }

)
))(	otherlv_4='type' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuestionAccess().getTypeKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionAccess().getTypeAnswerTypeEnumRuleCall_3_1_0()); 
	    }
		lv_type_5_0=ruleAnswerType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"AnswerType");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_6='required' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQuestionAccess().getRequiredKeyword_4_0());
    }
(
(
		lv_req_7_0=RULE_INT
		{
			newLeafNode(lv_req_7_0, grammarAccess.getQuestionAccess().getReqINTTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"req",
        		lv_req_7_0, 
        		"INT");
	    }

)
))?(	otherlv_8='Alternatives' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getQuestionAccess().getAlternativesKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionAccess().getAlternativesAlternativesParserRuleCall_5_1_0()); 
	    }
		lv_alternatives_9_0=ruleAlternatives		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionRule());
	        }
       		add(
       			$current, 
       			"alternatives",
        		lv_alternatives_9_0, 
        		"Alternatives");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleAlternatives
entryRuleAlternatives returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativesRule()); }
	 iv_ruleAlternatives=ruleAlternatives 
	 { $current=$iv_ruleAlternatives.current; } 
	 EOF 
;

// Rule Alternatives
ruleAlternatives returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Option' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlternativesAccess().getOptionKeyword_0());
    }
(
(
		lv_description_1_0=RULE_STRING
		{
			newLeafNode(lv_description_1_0, grammarAccess.getAlternativesAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAlternativesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_1_0, 
        		"STRING");
	    }

)
))
;





// Rule ArtefactType
ruleArtefactType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='input' 
	{
        $current = grammarAccess.getArtefactTypeAccess().getIn_EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getArtefactTypeAccess().getIn_EnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='output' 
	{
        $current = grammarAccess.getArtefactTypeAccess().getOut_EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getArtefactTypeAccess().getOut_EnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='inoutput' 
	{
        $current = grammarAccess.getArtefactTypeAccess().getInout_EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getArtefactTypeAccess().getInout_EnumLiteralDeclaration_2()); 
    }
));



// Rule ColectType
ruleColectType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='continuous' 
	{
        $current = grammarAccess.getColectTypeAccess().getContinuousEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getColectTypeAccess().getContinuousEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='intercalated' 
	{
        $current = grammarAccess.getColectTypeAccess().getIntercalatedEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getColectTypeAccess().getIntercalatedEnumLiteralDeclaration_1()); 
    }
));



// Rule MetricUnit
ruleMetricUnit returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='minutes' 
	{
        $current = grammarAccess.getMetricUnitAccess().getMinutesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMetricUnitAccess().getMinutesEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='uc' 
	{
        $current = grammarAccess.getMetricUnitAccess().getUcEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMetricUnitAccess().getUcEnumLiteralDeclaration_1()); 
    }
));



// Rule DesignType
ruleDesignType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='CRD - Completely Randomized Design' 
	{
        $current = grammarAccess.getDesignTypeAccess().getCDREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDesignTypeAccess().getCDREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='RCBD - Randomized Complete Block Design' 
	{
        $current = grammarAccess.getDesignTypeAccess().getRCBDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDesignTypeAccess().getRCBDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='LS - Latin Square' 
	{
        $current = grammarAccess.getDesignTypeAccess().getLSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDesignTypeAccess().getLSEnumLiteralDeclaration_2()); 
    }
));



// Rule QuestionnaireType
ruleQuestionnaireType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Pre' 
	{
        $current = grammarAccess.getQuestionnaireTypeAccess().getPreEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getQuestionnaireTypeAccess().getPreEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Pos' 
	{
        $current = grammarAccess.getQuestionnaireTypeAccess().getPosEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getQuestionnaireTypeAccess().getPosEnumLiteralDeclaration_1()); 
    }
));



// Rule AnswerType
ruleAnswerType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Text' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getTextEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAnswerTypeAccess().getTextEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Paragraph Text' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getParagraphTextEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAnswerTypeAccess().getParagraphTextEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Multiple Choice' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getMultipleChoiceEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAnswerTypeAccess().getMultipleChoiceEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='ComboBox' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getComboBoxEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAnswerTypeAccess().getComboBoxEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='CheckBoxes' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getCheckBoxesEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAnswerTypeAccess().getCheckBoxesEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Scale' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getScaleEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAnswerTypeAccess().getScaleEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Grid' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getGridEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getAnswerTypeAccess().getGridEnumLiteralDeclaration_6()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


