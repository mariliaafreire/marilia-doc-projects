//Models
modeltype DSL  uses expDslv2('http://www.ufrn.br/dimap/ase/dsl/ExpDslv2');
modeltype JPDL uses jpdl31('urn:jbpm.org:jpdl-3.1');


transformation ExpDSLv2ToWorkExpTese(in dsl : DSL, out outModel: JPDL);
main() {
	
    log('starting transformation...');
    dsl.rootObjects()[DSL::Model]->map model2model();
	log('ending transformation...');
}

mapping DSL::Model::model2model():JPDL::Model{
	elements := self.elements->map model2DSLModel();
}

mapping DSL::ExperimentElement::model2DSLModel():JPDL::DocumentRoot	 {
  processDefinition := self.process->map processToProcessDefinition(self.metrics,self.experiments->at(1).internalReplication);
  questionnaires := self.questionnaire -> map questToQuestionnaire(result);   
  metrics := self.metrics -> map metricsToMetrics(result)->asOrderedSet();
  plan := self.experiments -> map experimentalPlanToPlan(result);
}

mapping DSL::Metrics::metricsToMetrics(in res: JPDL::DocumentRoot): JPDL::Metric {
	name := self.name;
	description := self.description;
	type := getMetricType(self.detail);
	refname := '';
	if(type = JPDL::MetricType::quest) then {
		self.detail.oclAsType(DSL::DataMetric).questionnaires->forEach(q){
			refname := refname + ':' + q.name;
		}
	} else {
		if(type = JPDL::MetricType::collectedData) then {
		var dataMetric: DSL::DataMetric;
		dataMetric := self.detail.oclAsType(DSL::DataMetric);
		dataMetric.collectedData->forEach(c){
			refname := refname + ':' + c.name ;//c.oclAsType(DSL::CollectedData) + dataMetric.dataType;
		} 
			
		}else {
			if (type = JPDL::MetricType::artefact) then {
					self.detail.oclAsType(DSL::DataMetric).artefacts->forEach(a){
						refname := refname + ':' + a.name;
					}
			}endif;
		
	} endif;
	}endif;
	//setar o nome da variavel ou o nome do questionario ou do artefato...
	var processes := self.relatesTo;
	var proJPDL := res.allSubobjectsOfType(JPDL::ProcessDefinitionType);
	proJPDL->forEach(pj) {
		processes->forEach(p) {
			if(pj.oclAsType(ProcessDefinitionType).name.equalsIgnoreCase(p.name))then {
				relatesTo += pj.oclAsType(JPDL::ProcessDefinitionType);	
			}endif;
		};
	};
}

mapping DSL::ExperimentalPlan::experimentalPlanToPlan(in res: JPDL::DocumentRoot):JPDL::ExperimentalPlan {
	
    design := object JPDL::Design{
			DoE := getDesign(self.type);
			parameters := self.parameter -> map parameterToParameter();
			factors := self.factor -> map factorToFactor();
			depVariable := self.dependentVariable -> map depVarToDepVar(res);
		};
	
	goals := self.goal->map goalsToGoal(result.design);
	
}

mapping DSL::DependentVariable::depVarToDepVar(in res: JPDL::DocumentRoot): JPDL::DependentVariable {
	name := self.name;
	description := self.description;
	measureBy :=  getMetric(res, self.metrics);	
}

query getMetric(in res: JPDL::DocumentRoot, in metDSL:Sequence(DSL::Metrics)): Set(JPDL::Metric) {
	
	var met := res.allSubobjectsOfType(JPDL::Metric);
	var resultList : Set(JPDL::Metric);
	met->forEach(m) {
		metDSL->forEach(mdsl) {
			if(m.oclAsType(JPDL::Metric).name.equalsIgnoreCase(mdsl.name))then {
				 resultList += Sequence {m.oclAsType(JPDL::Metric)};	
			}endif;
		};
	};
	return resultList;
}

mapping DSL::Factor::factorToFactor(): JPDL::Factor {
	name := self.name;
	levels := self.level->map levelToLevel();
	result.isTreament := getBooleanValue(self.isDesiredVariation); 
}

mapping DSL::Levels::levelToLevel(): JPDL::Level{
	name := self.name;
}

mapping DSL::Parameter::parameterToParameter():JPDL::Parameter {
	key := self.variable;
	value := self.value;
}

	
mapping DSL::Goal::goalsToGoal(in des: JPDL::Design):JPDL::Goal {
	id := self.name;
	description := self.description;
	hypotheses := self.hypotheses ->map hypothesisToHypothesis(des)->asOrderedSet();
}

mapping DSL::Hypotheses::hypothesisToHypothesis(in des: JPDL::Design):JPDL::Hyphotesis {
	description := self.description;
	id := self.name;
	relationOp :=  relationMapping(self.operator);
	type := getHypType(self.type);
	 
	//link to dep variable
	var deps : Set(JPDL::DependentVariable);
	deps:= des.depVariable;
	deps->forEach(d){
		if(self.dependentVariable->at(1).name.equalsIgnoreCase(d.oclAsType(JPDL::DependentVariable).name))then{
			result.dependentVariable := d.oclAsType(JPDL::DependentVariable);
		}endif;
	};
	//link to tretaments
	self.levels->forEach(l){
	   des.allSubobjectsOfType(JPDL::Level)->forEach(le){
	   		if(le.oclAsType(JPDL::Level).name.equalsIgnoreCase(l.name))then{
	   				result.treatment +=Sequence{le.oclAsType(JPDL::Level)};
	   		}endif;
	   };
	};
}	

mapping DSL::DependentVariable::getDepVar(): JPDL::DependentVariable {
	name := self.name;
}
mapping DSL::Levels::levelToTreatments():JPDL::Level{
	name := self.name;
	
}

mapping DSL::Questionnaire::questToQuestionnaire(in res: JPDL::DocumentRoot): JPDL::Questionnaire {
	name := self.name;
	question := self.question->map questionToQuestion();
	if(type<>null) then {
		type := getQuestionnaireType(self.questionnaireType);
	}endif;

	self.relatesTo->forEach(p){
	   res.allSubobjectsOfType(JPDL::ProcessDefinitionType)->forEach(pro){
	   		if(pro.oclAsType(JPDL::ProcessDefinitionType).name.equalsIgnoreCase(p.name))then{
	   				result.processes += Sequence{pro.oclAsType(JPDL::ProcessDefinitionType)};
	   		}endif;
	   };
	};
}

mapping DSL::Question::questionToQuestion():JPDL::Question{
	description := self.description;
	type := getQuestionType(self.type);
	option := self.alternatives->alternativesToAlternatives();
	if (self.req = 1) then {
	    required := true.oclAsType(BooleanType);
	}else {
		required := false.oclAsType(BooleanType);
	}endif;
}

mapping DSL::Alternatives::alternativesToAlternatives(): JPDL::Alternative {
	description := self.description;
}
	
mapping DSL::Process::processToProcessDefinition(in mets:OrderedSet(DSL::Metrics),in num: Real) :JPDL::ProcessDefinitionType{
  
  	//cria o nó inicial e final do processo
  result.startState := object JPDL::StartStateType { 
				name := 'Starting'; 
				
				var act: Set(Task);
				act := self.allInstances(DSL::Task);
				
				act->forEach(a) {
					var comp := a.repr();
					var res := isSuccessor(comp, self.task); //if the activity has no other refering to her as next, it is a first activity...
						if(res.repr().equalsIgnoreCase('false')) then {
						//create a transition from start to this activity...	
						var start_t := object JPDL::TransitionType{
							name := 'startTransition'+a.name;
							to := a.name;
						};
						
			       	  transition += Sequence{start_t}
					
					}endif;			
				}				
  };
  	
  result.endState := object JPDL::EndStateType { 
				name := 'End'; 			
  };
  
  // cria swimlane com o papel determinado para a primeira atividade, caso exista.
  	result.swimlane := object JPDL::SwimlaneType { 
        
  		assignment := object JPDL::AssignmentType {
			actorId := getProcessRole(self);
		};
		
  };
  name := self.name;
  quantity := num.round();
  taskNode := self.task->map task2taskNode(mets,self)->asOrderedSet();
  
  //links
    self.allInstances(DSL::Task)-> map ligarAoNoFinal(result)->asOrderedSet();
}

mapping DSL::Task::task2taskNode(in met:OrderedSet(DSL::Metrics), in pro:DSL::Process): JPDL::TaskNodeType{
	name := self.name;
	description := self.description;
	var metrName: String;
		
	if(not(self.questionnaire->isEmpty())) then {
		
	log('task -> quest');
		self.questionnaire->forEach(i){
			
		 metrName := getMetricNameQuest(pro.name,met, i);
		 result.metrics += Sequence{ object JPDL::MetricInfo{
		 	name := metrName;
		 }
		 }
	}
	} else {	
		
		if(not(self.collectData->isEmpty()))then {
			
		log('task -> collect');
			self.collectData->forEach(c){
				
				metrName := getMetricNameData(pro.name,met, c);
				result.metrics += Sequence {object JPDL::MetricInfo{
			    name := metrName;
			
		}}
			}
			}else {
			
				
			if(not(self.artefacts->isEmpty()))then {
			
			log('task -> artefact');
			self.artefacts->forEach(a){
				metrName := getMetricNameArtefact(pro.name,met, a);
				result.metrics += Sequence {object JPDL::MetricInfo{
			    name := metrName;}}}
			}endif;
			
			}endif;
		}endif;

		
	artefacts := self.artefacts->map artefact2artefact()->asOrderedSet();
	
	
	// tratar última atividade
	self.next->forEach(i){
		transition += object JPDL::TransitionType{
			name := self.name+'_Transition';
			to := i.name;
		}//end_create_transactions
	};//end forEach next
	
   var nomeInput: String;
   var i :=0;
   met->forEach(ele) {    	
   	if(ele.relatesTo.name.equalsIgnoreCase(pro.name)) then { // check if the metric is set to this process
   	  ele.detail->forEach(j){ 
   	  	if(j.metaClassName().equalsIgnoreCase("TaskMetric")) then {
   	  		var part1:= j.oclAsType(TaskMetric).taskBegin.name.equalsIgnoreCase(self.name);
   			var part2:= j.oclAsType(TaskMetric).taskEnd.name.equalsIgnoreCase(self.name);
   			var part3:= checkBetween(j.oclAsType(TaskMetric).taskBegin.name,j.oclAsType(TaskMetric).taskEnd.name,self.name, pro);
            if((part1 or part2 or part3)) then {// and not part4))then {
   				result.event += Sequence {
   					object JPDL::EventType{
   					type:="task-end";
   					
   					action+=Sequence {
   						object JPDL::ActionType{
   							
   						refName := ele.name; //TODO:inserir se inicia ou termina aqui
   						name := ele.name;
   						_class := "br.ufrn.dimap.ppgsc.".concat(ele.name).concat("ActionHandler");
   				
   						}
   					}
   				}
   			}
   		} endif;
   	  }endif;
   	 	
   	 };  
   }endif;    
  };
   
}


	
mapping DSL::Artefact::artefact2artefact():JPDL::Artefact{
	name := self.name;
   
   description := self.description;
 
	if(self.type = DSL::ArtefactType::in_) then {
		result.type := JPDL::ArtefactType::input.repr();
		
	}endif;
		
	if (self.type = DSL::ArtefactType::out_)then {

		result.type:= JPDL::ArtefactType::output.repr();
	}endif;
		
	if (self.type = DSL::ArtefactType::inout_)then {

		result.type:= JPDL::ArtefactType::inoutput.repr();
	}endif;
	
}

//Create links to ENDNODE
mapping DSL::Task::ligarAoNoFinal(inout process: JPDL::ProcessDefinitionType){

		// cria transições para o fim...
		var i := getTransitionToFim(process);
		
	   if(i>1)then{
		
		var join := object JPDL::JoinType {
				name := 'joinEnd';
				transition := object JPDL::TransitionType{
					name := 'to_EndTransition';
					to:= 'End';
				};
			};
			process.join += Sequence{join};
			process.allInstances(JPDL::TaskNodeType)->forEach(task) {
			if(task.transition->isEmpty())then{
				var trst := object JPDL::TransitionType {
				name := task.name + 'transition';
				to := 'joinEnd';
			};
			task.transition += trst;
			}endif;
		};
			
		}else {
		
		process.allInstances(JPDL::TaskNodeType)->forEach(task) {
			if(task.transition->isEmpty())then{
				var trst := object JPDL::TransitionType {
				name := task.name + 'transition';
				to := 'End';
			};
			task.transition += trst;
			}endif;
		};
		}endif;
	
}

/************
 *  QUERYS  *
 ************/
 query getTransitionToFim(in process: JPDL::ProcessDefinitionType): Integer{
    var i := 0;
    process.allInstances(JPDL::TaskNodeType)->forEach(task) {
			if(task.transition->isEmpty())then{
				i:= i +1;
		
			}endif;
		};
    return i;
 	
 }

//check if activity is between begin and end
query checkBetween(in begin: String, in end_: String, in atual :String, in pro:DSL::Process):Boolean{
	
 if( atual.equalsIgnoreCase(begin) or atual.equalsIgnoreCase(end_))then {
 	return true;
 }else {
 	var atividadeAtual : Task;
 	//pegar o conjunto de todas as atividades do processo...
	//pega a primeira e vai andando pra ver se é o begin, se sim, até chegar na end pega
	atividadeAtual = getActivity(atual,pro);
	if(atividadeAtual.next != null) then{
	   atividadeAtual.next->forEach(act){ 
           checkBetween(begin,end_,act.name,pro);
     };
     }endif;
	    
 }endif;
return false;
}

//QUERY QUE RETORNA A ATIVIDADE A PARTIR DO NOME
query getActivity(in name: String, in pro:DSL::Process):DSL::Task {
	var activities : Set(DSL::Task);
	activities := pro.allInstances(Task);
	 activities->forEach(i){
 			
 		var exp := name.equalsIgnoreCase(i.oclAsType(Task).name);
  		if (exp) then {
  			return i;
 		 }endif;
  };
}

query getProcessRole(in pro: DSL::Process): String {
	//alwasy return the role from the first process activity or task ...
	var act := pro.task;
	var role:= 'unknown';
	/*
		
	}if (act->notEmpty())then {
		var roles := act.role;
		if (roles->notEmpty()) then {
			role := roles->at(1).name;
		}else  { // case role has not been specified to activity, it can be specified to tasks.
			if(act.tasks->notEmpty())then{
				var role2 := act.tasks.role;
				role := role2->at(1).name;
			}endif;
		}endif;
	}endif;
	*/
	return pro.role->at(1).repr();
}

//It verify if a task is setted as next for any other task, else it activity is the one of the firsts and returns false...
query isSuccessor(in rep: String,in act: Set(Task)): Boolean {
	
	var x:=0;
	act->forEach(i){
	    i.next->forEach(j){
			if(j.repr().equalsIgnoreCase(rep))then{
			x:= x +1;
		}endif;
	}
	};
	if(x>0)then{
		return true;
	} else {
		return false;
	}endif;
	
}

//
query getQuestionType(in type : DSL::AnswerType) : JPDL::AnswerType {
	var res: JPDL::AnswerType;
   
    if(type.=(DSL::AnswerType::SingleChoice)) then {
		res := JPDL::AnswerType::checkBox;    }
	else {
	if(type.= (DSL::AnswerType::ParagraphText)) then {
		res := JPDL::AnswerType::paragraphText;
	} else {
		if(type.=(DSL::AnswerType::Text)) then {
		res := JPDL::AnswerType::text;
	} else {
		if(type.=(DSL::AnswerType::MultipleChoice)) then {
		res := JPDL::AnswerType::checkBox;
	}endif;
	}endif;
	}endif;
	}endif;
	
	return res;
}

query getDesign(in type : DSL::DesignType) : JPDL::DoEType {
	var res: JPDL::DoEType;
	if( type.=(DSL::DesignType::CDR))then {
		res := JPDL::DoEType::CRD;
	} else {
	if( type.=(DSL::DesignType::RCBD)) then {
		res := JPDL::DoEType::RCBD;
	} else {
		if( type.=(DSL::DesignType::LS)) then {
		res := JPDL::DoEType::LS;
	} else {
	if( type.=(DSL::DesignType::other)) then {
		res := JPDL::DoEType::other;
	}endif;
	}endif;
	}endif;
	}endif;
	return res;
}

query getMetricType(in detail: DSL::Detail): JPDL::MetricType {
	

		if(detail.oclIsKindOf(DSL::DataMetric))then {
			if(detail.oclAsType(DSL::DataMetric).collectedData <> null) then {
				return MetricType::collectedData;
			}else {
			if(detail.oclAsType(DSL::DataMetric).artefacts <> null) then {
				return MetricType::artefact;
			}else {
			if(detail.oclAsType(DSL::DataMetric).questionnaires <> null) then {
				return MetricType::quest;
				}endif
			}endif
		}endif
		} else {
				
				return MetricType::time;
			
		}endif;
		
	
	
}
query getQuestionnaireType(in type: DSL::QuestionnaireType): JPDL::QuestionnaireType {

		if(type.=(QuestionnaireType::pre))then {
			return JPDL::QuestionnaireType::Pre;
		} else {
			return JPDL::QuestionnaireType::Post;
			
		}endif;
	

}

query getHypType(in type: DSL::HypothesisType): JPDL::HypothesisType {
	    var res : JPDL::HypothesisType;
	    
		if(type<>(DSL::HypothesisType::null_))then {
			res := JPDL::HypothesisType::alternative;
		} else {
			res := JPDL::HypothesisType::null_;
			
		}endif;
		log('typo hyp:',res);
		return res;
}
query relationMapping(in type: DSL::OperatorType):JPDL::RelationOperator {
	

	if (type.=(OperatorType::equal)) then {
		return JPDL::RelationOperator::equal;
	}else { 
	if (type .=(OperatorType::different) )then {
		return JPDL::RelationOperator::different;	
	} else {
		
	if (type.=(OperatorType::more)) then {
		return JPDL::RelationOperator::morethan;
	} else {
		if (type.=(OperatorType::less)) then {
		return JPDL::RelationOperator::lessthan;
	} else {
		if (type.=(OperatorType::moreEqual)) then {
		return JPDL::RelationOperator::moreequalthan;
	} else {
		return JPDL::RelationOperator::lessequalthan;
	}endif;
	}endif;
	}endif;
	}endif;
	}endif;
	return null;
}
query getBooleanValue(in type: String): JPDL::BooleanType {
	if(type.equalsIgnoreCase("true")) then {
		return true.oclAsType(BooleanType);
	} else{
		return false.oclAsType(BooleanType);
	}endif;
	return null;
}

query getMetricNameQuest(in proc: String, in met: OrderedSet(DSL::Metrics), in quest: DSL::Questionnaire): String {
log('process name: '+ proc);
met->forEach(m){
	m.relatesTo->forEach(p) {
		if(p.name.equalsIgnoreCase(proc))then {
		    m.allSubobjectsOfType(DSL::DataMetric)->forEach(d){
		    	if(d.oclAsType(DSL::DataMetric).questionnaires->notEmpty())then{
		    	    d.oclAsType(DSL::DataMetric).questionnaires->forEach(q) {
		    	    	if(q.name.equalsIgnoreCase(quest.name))then {
		    	    		return m.name;
		    	    	}endif;
		    	    };
		    	  }endif;
		    };
		  }endif;
	};
};
}
query getMetricNameData(in proc: String, in met: OrderedSet(DSL::Metrics),in  cd: DSL::CollectedData): String {
	log('process name: '+ proc);
met->forEach(m){
	m.relatesTo->forEach(p) {
		if(p.name.equalsIgnoreCase(proc))then {
		    m.allSubobjectsOfType(DSL::DataMetric)->forEach(d){
		    	if(d.oclAsType(DSL::DataMetric).collectedData->notEmpty())then{
		    	    d.oclAsType(DSL::DataMetric).collectedData->forEach(c) {
		    	    	if(c.name.equalsIgnoreCase(cd.name))then {
		    	    		return m.name;
		    	    	}endif;
		    	    };
		    	  }endif;
		    };
		  }endif;
	};
};
}
query getMetricNameArtefact(in proc: String, in met: OrderedSet(DSL::Metrics),in  art: DSL::Artefact): String {
met->forEach(m){
	m.relatesTo->forEach(p) {
		if(p.name.equalsIgnoreCase(proc))then {
		    m.allSubobjectsOfType(DSL::DataMetric)->forEach(d){
		    	if(d.oclAsType(DSL::DataMetric).artefacts->notEmpty())then{
		    	    d.oclAsType(DSL::DataMetric).artefacts->forEach(a) {
		    	    	if(a.name.equalsIgnoreCase(art.name))then {
		    	    		return m.name;
		    	    	}endif;
		    	    };
		    	  }endif;
		    };
		  }endif;
	};
};
}
