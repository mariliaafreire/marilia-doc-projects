/*
* generated by Xtext
*/

package org.xtext.project.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsExperimentElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=ExperimentElement*;
		public ParserRule getRule() { return rule; }

		//elements+=ExperimentElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//ExperimentElement
		public RuleCall getElementsExperimentElementParserRuleCall_0() { return cElementsExperimentElementParserRuleCall_0; }
	}

	public class ExperimentElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExperimentElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExperimentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cProcessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProcessProcessParserRuleCall_2_0 = (RuleCall)cProcessAssignment_2.eContents().get(0);
		private final Assignment cMetricsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetricsMetricsParserRuleCall_3_0 = (RuleCall)cMetricsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExperimentalPlanKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExperimentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExperimentsExperimentalPlanParserRuleCall_4_1_0 = (RuleCall)cExperimentsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cQuestionnairesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cQuestionnaireAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cQuestionnaireQuestionnaireParserRuleCall_5_1_0 = (RuleCall)cQuestionnaireAssignment_5_1.eContents().get(0);
		
		//ExperimentElement:
		//	"Experiment" name=STRING process+=Process* metrics+=Metrics* ("Experimental Plan" experiments+=ExperimentalPlan*)?
		//	("Questionnaires" questionnaire+=Questionnaire*)?;
		public ParserRule getRule() { return rule; }

		//"Experiment" name=STRING process+=Process* metrics+=Metrics* ("Experimental Plan" experiments+=ExperimentalPlan*)?
		//("Questionnaires" questionnaire+=Questionnaire*)?
		public Group getGroup() { return cGroup; }

		//"Experiment"
		public Keyword getExperimentKeyword_0() { return cExperimentKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//process+=Process*
		public Assignment getProcessAssignment_2() { return cProcessAssignment_2; }

		//Process
		public RuleCall getProcessProcessParserRuleCall_2_0() { return cProcessProcessParserRuleCall_2_0; }

		//metrics+=Metrics*
		public Assignment getMetricsAssignment_3() { return cMetricsAssignment_3; }

		//Metrics
		public RuleCall getMetricsMetricsParserRuleCall_3_0() { return cMetricsMetricsParserRuleCall_3_0; }

		//("Experimental Plan" experiments+=ExperimentalPlan*)?
		public Group getGroup_4() { return cGroup_4; }

		//"Experimental Plan"
		public Keyword getExperimentalPlanKeyword_4_0() { return cExperimentalPlanKeyword_4_0; }

		//experiments+=ExperimentalPlan*
		public Assignment getExperimentsAssignment_4_1() { return cExperimentsAssignment_4_1; }

		//ExperimentalPlan
		public RuleCall getExperimentsExperimentalPlanParserRuleCall_4_1_0() { return cExperimentsExperimentalPlanParserRuleCall_4_1_0; }

		//("Questionnaires" questionnaire+=Questionnaire*)?
		public Group getGroup_5() { return cGroup_5; }

		//"Questionnaires"
		public Keyword getQuestionnairesKeyword_5_0() { return cQuestionnairesKeyword_5_0; }

		//questionnaire+=Questionnaire*
		public Assignment getQuestionnaireAssignment_5_1() { return cQuestionnaireAssignment_5_1; }

		//Questionnaire
		public RuleCall getQuestionnaireQuestionnaireParserRuleCall_5_1_0() { return cQuestionnaireQuestionnaireParserRuleCall_5_1_0; }
	}

	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActivitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActivitiesActivityParserRuleCall_3_0 = (RuleCall)cActivitiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////WorkbreakdownStructure	
		//Process:
		//	"Process" name=STRING "{" activities+=Activity* "}";
		public ParserRule getRule() { return rule; }

		//"Process" name=STRING "{" activities+=Activity* "}"
		public Group getGroup() { return cGroup; }

		//"Process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//activities+=Activity*
		public Assignment getActivitiesAssignment_3() { return cActivitiesAssignment_3; }

		//Activity
		public RuleCall getActivitiesActivityParserRuleCall_3_0() { return cActivitiesActivityParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNextActivityCrossReference_3_0 = (CrossReference)cNextAssignment_3.eContents().get(0);
		private final RuleCall cNextActivitySTRINGTerminalRuleCall_3_0_1 = (RuleCall)cNextActivityCrossReference_3_0.eContents().get(1);
		private final Assignment cArtefactsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArtefactsArtefactParserRuleCall_4_0 = (RuleCall)cArtefactsAssignment_4.eContents().get(0);
		private final Assignment cRoleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRoleRoleParserRuleCall_5_0 = (RuleCall)cRoleAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTasksAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_6_1_0 = (RuleCall)cTasksAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Activity:
		//	"Activity" name=STRING description=STRING next+=[Activity|STRING]? artefacts+=Artefact? role+=Role? ("{" tasks+=Task*
		//	"}")?;
		public ParserRule getRule() { return rule; }

		//"Activity" name=STRING description=STRING next+=[Activity|STRING]? artefacts+=Artefact? role+=Role? ("{" tasks+=Task*
		//"}")?
		public Group getGroup() { return cGroup; }

		//"Activity"
		public Keyword getActivityKeyword_0() { return cActivityKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }

		//next+=[Activity|STRING]?
		public Assignment getNextAssignment_3() { return cNextAssignment_3; }

		//[Activity|STRING]
		public CrossReference getNextActivityCrossReference_3_0() { return cNextActivityCrossReference_3_0; }

		//STRING
		public RuleCall getNextActivitySTRINGTerminalRuleCall_3_0_1() { return cNextActivitySTRINGTerminalRuleCall_3_0_1; }

		//artefacts+=Artefact?
		public Assignment getArtefactsAssignment_4() { return cArtefactsAssignment_4; }

		//Artefact
		public RuleCall getArtefactsArtefactParserRuleCall_4_0() { return cArtefactsArtefactParserRuleCall_4_0; }

		//role+=Role?
		public Assignment getRoleAssignment_5() { return cRoleAssignment_5; }

		//Role
		public RuleCall getRoleRoleParserRuleCall_5_0() { return cRoleRoleParserRuleCall_5_0; }

		//("{" tasks+=Task* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }

		//tasks+=Task*
		public Assignment getTasksAssignment_6_1() { return cTasksAssignment_6_1; }

		//Task
		public RuleCall getTasksTaskParserRuleCall_6_1_0() { return cTasksTaskParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
	}

	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cArtefactsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArtefactsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArtefactsArtefactParserRuleCall_4_1_0 = (RuleCall)cArtefactsAssignment_4_1.eContents().get(0);
		private final Assignment cRoleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRoleRoleParserRuleCall_5_0 = (RuleCall)cRoleAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Task:
		//	"Task" name=STRING "description" description=STRING ("artefacts" artefacts+=Artefact*)? role+=Role? ";";
		public ParserRule getRule() { return rule; }

		//"Task" name=STRING "description" description=STRING ("artefacts" artefacts+=Artefact*)? role+=Role? ";"
		public Group getGroup() { return cGroup; }

		//"Task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"description"
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }

		//description=STRING
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }

		//("artefacts" artefacts+=Artefact*)?
		public Group getGroup_4() { return cGroup_4; }

		//"artefacts"
		public Keyword getArtefactsKeyword_4_0() { return cArtefactsKeyword_4_0; }

		//artefacts+=Artefact*
		public Assignment getArtefactsAssignment_4_1() { return cArtefactsAssignment_4_1; }

		//Artefact
		public RuleCall getArtefactsArtefactParserRuleCall_4_1_0() { return cArtefactsArtefactParserRuleCall_4_1_0; }

		//role+=Role?
		public Assignment getRoleAssignment_5() { return cRoleAssignment_5; }

		//Role
		public RuleCall getRoleRoleParserRuleCall_5_0() { return cRoleRoleParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Role:
		//	"Role" name=STRING ";";
		public ParserRule getRule() { return rule; }

		//"Role" name=STRING ";"
		public Group getGroup() { return cGroup; }

		//"Role"
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ArtefactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Artefact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtefactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeArtefactTypeEnumRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Artefact:
		//	"artefact" name=STRING "description" description=STRING "type" type=ArtefactType ";";
		public ParserRule getRule() { return rule; }

		//"artefact" name=STRING "description" description=STRING "type" type=ArtefactType ";"
		public Group getGroup() { return cGroup; }

		//"artefact"
		public Keyword getArtefactKeyword_0() { return cArtefactKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"description"
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }

		//description=STRING
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }

		//"type"
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }

		//type=ArtefactType
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//ArtefactType
		public RuleCall getTypeArtefactTypeEnumRuleCall_5_0() { return cTypeArtefactTypeEnumRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class MetricsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metrics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetricKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRelatesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRelatesToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRelatesToProcessCrossReference_3_0 = (CrossReference)cRelatesToAssignment_3.eContents().get(0);
		private final RuleCall cRelatesToProcessSTRINGTerminalRuleCall_3_0_1 = (RuleCall)cRelatesToProcessCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDescriptionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cDescriptionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFormKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFormAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFormColectTypeEnumRuleCall_6_1_0 = (RuleCall)cFormAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cUnitKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cUnitAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cUnitMetricUnitEnumRuleCall_7_1_0 = (RuleCall)cUnitAssignment_7_1.eContents().get(0);
		private final Assignment cDetailAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDetailDetailParserRuleCall_8_0 = (RuleCall)cDetailAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////Metric Definition	
		//Metrics:
		//	"Metric" name=STRING "relates" relatesTo=[Process|STRING] "{" ("description" description=STRING) ("form"
		//	form=ColectType)? ("unit" unit=MetricUnit)? detail+=Detail "}";
		public ParserRule getRule() { return rule; }

		//"Metric" name=STRING "relates" relatesTo=[Process|STRING] "{" ("description" description=STRING) ("form"
		//form=ColectType)? ("unit" unit=MetricUnit)? detail+=Detail "}"
		public Group getGroup() { return cGroup; }

		//"Metric"
		public Keyword getMetricKeyword_0() { return cMetricKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"relates"
		public Keyword getRelatesKeyword_2() { return cRelatesKeyword_2; }

		//relatesTo=[Process|STRING]
		public Assignment getRelatesToAssignment_3() { return cRelatesToAssignment_3; }

		//[Process|STRING]
		public CrossReference getRelatesToProcessCrossReference_3_0() { return cRelatesToProcessCrossReference_3_0; }

		//STRING
		public RuleCall getRelatesToProcessSTRINGTerminalRuleCall_3_0_1() { return cRelatesToProcessSTRINGTerminalRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"description" description=STRING
		public Group getGroup_5() { return cGroup_5; }

		//"description"
		public Keyword getDescriptionKeyword_5_0() { return cDescriptionKeyword_5_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_5_1() { return cDescriptionAssignment_5_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_1_0() { return cDescriptionSTRINGTerminalRuleCall_5_1_0; }

		//("form" form=ColectType)?
		public Group getGroup_6() { return cGroup_6; }

		//"form"
		public Keyword getFormKeyword_6_0() { return cFormKeyword_6_0; }

		//form=ColectType
		public Assignment getFormAssignment_6_1() { return cFormAssignment_6_1; }

		//ColectType
		public RuleCall getFormColectTypeEnumRuleCall_6_1_0() { return cFormColectTypeEnumRuleCall_6_1_0; }

		//("unit" unit=MetricUnit)?
		public Group getGroup_7() { return cGroup_7; }

		//"unit"
		public Keyword getUnitKeyword_7_0() { return cUnitKeyword_7_0; }

		//unit=MetricUnit
		public Assignment getUnitAssignment_7_1() { return cUnitAssignment_7_1; }

		//MetricUnit
		public RuleCall getUnitMetricUnitEnumRuleCall_7_1_0() { return cUnitMetricUnitEnumRuleCall_7_1_0; }

		//detail+=Detail
		public Assignment getDetailAssignment_8() { return cDetailAssignment_8; }

		//Detail
		public RuleCall getDetailDetailParserRuleCall_8_0() { return cDetailDetailParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class DetailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Detail");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActivityMetricParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskMetricParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArtefactMetricParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Detail:
		//	ActivityMetric | TaskMetric | ArtefactMetric;
		public ParserRule getRule() { return rule; }

		//ActivityMetric | TaskMetric | ArtefactMetric
		public Alternatives getAlternatives() { return cAlternatives; }

		//ActivityMetric
		public RuleCall getActivityMetricParserRuleCall_0() { return cActivityMetricParserRuleCall_0; }

		//TaskMetric
		public RuleCall getTaskMetricParserRuleCall_1() { return cTaskMetricParserRuleCall_1; }

		//ArtefactMetric
		public RuleCall getArtefactMetricParserRuleCall_2() { return cArtefactMetricParserRuleCall_2; }
	}

	public class ActivityMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActivityMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cActivityBeginKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cActivityBeginAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cActivityBeginActivityCrossReference_0_1_0 = (CrossReference)cActivityBeginAssignment_0_1.eContents().get(0);
		private final RuleCall cActivityBeginActivitySTRINGTerminalRuleCall_0_1_0_1 = (RuleCall)cActivityBeginActivityCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cActivityEndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActivityEndAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cActivityEndActivityCrossReference_1_1_0 = (CrossReference)cActivityEndAssignment_1_1.eContents().get(0);
		private final RuleCall cActivityEndActivitySTRINGTerminalRuleCall_1_1_0_1 = (RuleCall)cActivityEndActivityCrossReference_1_1_0.eContents().get(1);
		
		//ActivityMetric:
		//	("activityBegin" activityBegin=[Activity|STRING]) ("activityEnd" activityEnd=[Activity|STRING])? //opcional
		//;
		public ParserRule getRule() { return rule; }

		//("activityBegin" activityBegin=[Activity|STRING]) ("activityEnd" activityEnd=[Activity|STRING])? //opcional
		public Group getGroup() { return cGroup; }

		//"activityBegin" activityBegin=[Activity|STRING]
		public Group getGroup_0() { return cGroup_0; }

		//"activityBegin"
		public Keyword getActivityBeginKeyword_0_0() { return cActivityBeginKeyword_0_0; }

		//activityBegin=[Activity|STRING]
		public Assignment getActivityBeginAssignment_0_1() { return cActivityBeginAssignment_0_1; }

		//[Activity|STRING]
		public CrossReference getActivityBeginActivityCrossReference_0_1_0() { return cActivityBeginActivityCrossReference_0_1_0; }

		//STRING
		public RuleCall getActivityBeginActivitySTRINGTerminalRuleCall_0_1_0_1() { return cActivityBeginActivitySTRINGTerminalRuleCall_0_1_0_1; }

		//("activityEnd" activityEnd=[Activity|STRING])?
		public Group getGroup_1() { return cGroup_1; }

		//"activityEnd"
		public Keyword getActivityEndKeyword_1_0() { return cActivityEndKeyword_1_0; }

		//activityEnd=[Activity|STRING]
		public Assignment getActivityEndAssignment_1_1() { return cActivityEndAssignment_1_1; }

		//[Activity|STRING]
		public CrossReference getActivityEndActivityCrossReference_1_1_0() { return cActivityEndActivityCrossReference_1_1_0; }

		//STRING
		public RuleCall getActivityEndActivitySTRINGTerminalRuleCall_1_1_0_1() { return cActivityEndActivitySTRINGTerminalRuleCall_1_1_0_1; }
	}

	public class TaskMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTasksKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTasksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTasksTaskCrossReference_1_0 = (CrossReference)cTasksAssignment_1.eContents().get(0);
		private final RuleCall cTasksTaskSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cTasksTaskCrossReference_1_0.eContents().get(1);
		
		//TaskMetric:
		//	"tasks" tasks+=[Task|STRING]*;
		public ParserRule getRule() { return rule; }

		//"tasks" tasks+=[Task|STRING]*
		public Group getGroup() { return cGroup; }

		//"tasks"
		public Keyword getTasksKeyword_0() { return cTasksKeyword_0; }

		//tasks+=[Task|STRING]*
		public Assignment getTasksAssignment_1() { return cTasksAssignment_1; }

		//[Task|STRING]
		public CrossReference getTasksTaskCrossReference_1_0() { return cTasksTaskCrossReference_1_0; }

		//STRING
		public RuleCall getTasksTaskSTRINGTerminalRuleCall_1_0_1() { return cTasksTaskSTRINGTerminalRuleCall_1_0_1; }
	}

	public class ArtefactMetricElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArtefactMetric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtefactsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cArtefactsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cArtefactsArtefactCrossReference_2_0 = (CrossReference)cArtefactsAssignment_2.eContents().get(0);
		private final RuleCall cArtefactsArtefactSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cArtefactsArtefactCrossReference_2_0.eContents().get(1);
		
		//ArtefactMetric:
		//	"artefacts" name=STRING artefacts=[Artefact|STRING]*;
		public ParserRule getRule() { return rule; }

		//"artefacts" name=STRING artefacts=[Artefact|STRING]*
		public Group getGroup() { return cGroup; }

		//"artefacts"
		public Keyword getArtefactsKeyword_0() { return cArtefactsKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//artefacts=[Artefact|STRING]*
		public Assignment getArtefactsAssignment_2() { return cArtefactsAssignment_2; }

		//[Artefact|STRING]
		public CrossReference getArtefactsArtefactCrossReference_2_0() { return cArtefactsArtefactCrossReference_2_0; }

		//STRING
		public RuleCall getArtefactsArtefactSTRINGTerminalRuleCall_2_0_1() { return cArtefactsArtefactSTRINGTerminalRuleCall_2_0_1; }
	}

	public class ExperimentalPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExperimentalPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDesignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDesignTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParameterAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParameterParameterParserRuleCall_5_0 = (RuleCall)cParameterAssignment_5.eContents().get(0);
		private final Assignment cFactorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFactorFactorParserRuleCall_6_0 = (RuleCall)cFactorAssignment_6.eContents().get(0);
		private final Keyword cInternalReplicationKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cInternalReplicationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInternalReplicationINTTerminalRuleCall_8_0 = (RuleCall)cInternalReplicationAssignment_8.eContents().get(0);
		private final Assignment cLinkAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLinkLinkParserRuleCall_9_0 = (RuleCall)cLinkAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		////CRD � Completely Randomized Design
		////RCBD � Randomized Complete Block Design
		////LS � Latin Square
		//ExperimentalPlan:
		//	"Design" name=STRING "type" type=DesignType "{" parameter+=Parameter* factor+=Factor* "Internal Replication "
		//	internalReplication=INT link+=Link* "}";
		public ParserRule getRule() { return rule; }

		//"Design" name=STRING "type" type=DesignType "{" parameter+=Parameter* factor+=Factor* "Internal Replication "
		//internalReplication=INT link+=Link* "}"
		public Group getGroup() { return cGroup; }

		//"Design"
		public Keyword getDesignKeyword_0() { return cDesignKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//type=DesignType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//DesignType
		public RuleCall getTypeDesignTypeEnumRuleCall_3_0() { return cTypeDesignTypeEnumRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//parameter+=Parameter*
		public Assignment getParameterAssignment_5() { return cParameterAssignment_5; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_5_0() { return cParameterParameterParserRuleCall_5_0; }

		//factor+=Factor*
		public Assignment getFactorAssignment_6() { return cFactorAssignment_6; }

		//Factor
		public RuleCall getFactorFactorParserRuleCall_6_0() { return cFactorFactorParserRuleCall_6_0; }

		//"Internal Replication "
		public Keyword getInternalReplicationKeyword_7() { return cInternalReplicationKeyword_7; }

		//internalReplication=INT
		public Assignment getInternalReplicationAssignment_8() { return cInternalReplicationAssignment_8; }

		//INT
		public RuleCall getInternalReplicationINTTerminalRuleCall_8_0() { return cInternalReplicationINTTerminalRuleCall_8_0; }

		//link+=Link*
		public Assignment getLinkAssignment_9() { return cLinkAssignment_9; }

		//Link
		public RuleCall getLinkLinkParserRuleCall_9_0() { return cLinkLinkParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableSTRINGTerminalRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Parameter:
		//	"Parameter" variable=STRING "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//"Parameter" variable=STRING "=" value=STRING
		public Group getGroup() { return cGroup; }

		//"Parameter"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//variable=STRING
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//STRING
		public RuleCall getVariableSTRINGTerminalRuleCall_1_0() { return cVariableSTRINGTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Factor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsDesiredVariationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIsDesiredVariationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cIsDesiredVariationAlternatives_3_0 = (Alternatives)cIsDesiredVariationAssignment_3.eContents().get(0);
		private final Keyword cIsDesiredVariationTrueKeyword_3_0_0 = (Keyword)cIsDesiredVariationAlternatives_3_0.eContents().get(0);
		private final Keyword cIsDesiredVariationFalseKeyword_3_0_1 = (Keyword)cIsDesiredVariationAlternatives_3_0.eContents().get(1);
		private final Assignment cLevelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLevelLevelsParserRuleCall_4_0 = (RuleCall)cLevelAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Factor:
		//	"Factor" name=STRING "isDesiredVariation" isDesiredVariation=("True" | "False") level+=Levels* ";";
		public ParserRule getRule() { return rule; }

		//"Factor" name=STRING "isDesiredVariation" isDesiredVariation=("True" | "False") level+=Levels* ";"
		public Group getGroup() { return cGroup; }

		//"Factor"
		public Keyword getFactorKeyword_0() { return cFactorKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"isDesiredVariation"
		public Keyword getIsDesiredVariationKeyword_2() { return cIsDesiredVariationKeyword_2; }

		//isDesiredVariation=("True" | "False")
		public Assignment getIsDesiredVariationAssignment_3() { return cIsDesiredVariationAssignment_3; }

		//"True" | "False"
		public Alternatives getIsDesiredVariationAlternatives_3_0() { return cIsDesiredVariationAlternatives_3_0; }

		//"True"
		public Keyword getIsDesiredVariationTrueKeyword_3_0_0() { return cIsDesiredVariationTrueKeyword_3_0_0; }

		//"False"
		public Keyword getIsDesiredVariationFalseKeyword_3_0_1() { return cIsDesiredVariationFalseKeyword_3_0_1; }

		//level+=Levels*
		public Assignment getLevelAssignment_4() { return cLevelAssignment_4; }

		//Levels
		public RuleCall getLevelLevelsParserRuleCall_4_0() { return cLevelLevelsParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class LevelsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Levels");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Levels:
		//	"Level" name=STRING ";";
		public ParserRule getRule() { return rule; }

		//"Level" name=STRING ";"
		public Group getGroup() { return cGroup; }

		//"Level"
		public Keyword getLevelKeyword_0() { return cLevelKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcedureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcedureProcessCrossReference_1_0 = (CrossReference)cProcedureAssignment_1.eContents().get(0);
		private final RuleCall cProcedureProcessSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cProcedureProcessCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTreatmentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTreatmentLevelsCrossReference_3_0 = (CrossReference)cTreatmentAssignment_3.eContents().get(0);
		private final RuleCall cTreatmentLevelsSTRINGTerminalRuleCall_3_0_1 = (RuleCall)cTreatmentLevelsCrossReference_3_0.eContents().get(1);
		
		//Link:
		//	"Link" procedure+=[Process|STRING] "to" treatment+=[Levels|STRING]*;
		public ParserRule getRule() { return rule; }

		//"Link" procedure+=[Process|STRING] "to" treatment+=[Levels|STRING]*
		public Group getGroup() { return cGroup; }

		//"Link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//procedure+=[Process|STRING]
		public Assignment getProcedureAssignment_1() { return cProcedureAssignment_1; }

		//[Process|STRING]
		public CrossReference getProcedureProcessCrossReference_1_0() { return cProcedureProcessCrossReference_1_0; }

		//STRING
		public RuleCall getProcedureProcessSTRINGTerminalRuleCall_1_0_1() { return cProcedureProcessSTRINGTerminalRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//treatment+=[Levels|STRING]*
		public Assignment getTreatmentAssignment_3() { return cTreatmentAssignment_3; }

		//[Levels|STRING]
		public CrossReference getTreatmentLevelsCrossReference_3_0() { return cTreatmentLevelsCrossReference_3_0; }

		//STRING
		public RuleCall getTreatmentLevelsSTRINGTerminalRuleCall_3_0_1() { return cTreatmentLevelsSTRINGTerminalRuleCall_3_0_1; }
	}

	public class QuestionnaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Questionnaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionnaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRelatesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRelatesToAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRelatesToProcessCrossReference_2_1_0 = (CrossReference)cRelatesToAssignment_2_1.eContents().get(0);
		private final RuleCall cRelatesToProcessSTRINGTerminalRuleCall_2_1_0_1 = (RuleCall)cRelatesToProcessCrossReference_2_1_0.eContents().get(1);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cQuestionnaireTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuestionnaireTypeQuestionnaireTypeEnumRuleCall_4_0 = (RuleCall)cQuestionnaireTypeAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cQuestionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQuestionQuestionParserRuleCall_6_0 = (RuleCall)cQuestionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Questionnaire:
		//	"Questionnaire" name=STRING ("relates" relatesTo+=[Process|STRING]*)? "type" questionnaireType=QuestionnaireType "{"
		//	question+=Question* "};";
		public ParserRule getRule() { return rule; }

		//"Questionnaire" name=STRING ("relates" relatesTo+=[Process|STRING]*)? "type" questionnaireType=QuestionnaireType "{"
		//question+=Question* "};"
		public Group getGroup() { return cGroup; }

		//"Questionnaire"
		public Keyword getQuestionnaireKeyword_0() { return cQuestionnaireKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//("relates" relatesTo+=[Process|STRING]*)?
		public Group getGroup_2() { return cGroup_2; }

		//"relates"
		public Keyword getRelatesKeyword_2_0() { return cRelatesKeyword_2_0; }

		//relatesTo+=[Process|STRING]*
		public Assignment getRelatesToAssignment_2_1() { return cRelatesToAssignment_2_1; }

		//[Process|STRING]
		public CrossReference getRelatesToProcessCrossReference_2_1_0() { return cRelatesToProcessCrossReference_2_1_0; }

		//STRING
		public RuleCall getRelatesToProcessSTRINGTerminalRuleCall_2_1_0_1() { return cRelatesToProcessSTRINGTerminalRuleCall_2_1_0_1; }

		//"type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//questionnaireType=QuestionnaireType
		public Assignment getQuestionnaireTypeAssignment_4() { return cQuestionnaireTypeAssignment_4; }

		//QuestionnaireType
		public RuleCall getQuestionnaireTypeQuestionnaireTypeEnumRuleCall_4_0() { return cQuestionnaireTypeQuestionnaireTypeEnumRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//question+=Question*
		public Assignment getQuestionAssignment_6() { return cQuestionAssignment_6; }

		//Question
		public RuleCall getQuestionQuestionParserRuleCall_6_0() { return cQuestionQuestionParserRuleCall_6_0; }

		//"};"
		public Keyword getRightCurlyBracketSemicolonKeyword_7() { return cRightCurlyBracketSemicolonKeyword_7; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDescriptionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeAnswerTypeEnumRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRequiredKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReqAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReqINTTerminalRuleCall_4_1_0 = (RuleCall)cReqAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAlternativesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAlternativesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAlternativesAlternativesParserRuleCall_5_1_0 = (RuleCall)cAlternativesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Question:
		//	name=STRING "{" ("description" description=STRING) ("type" type=AnswerType) ("required" req=INT)? ("Alternatives"
		//	alternatives+=Alternatives*)? "}";
		public ParserRule getRule() { return rule; }

		//name=STRING "{" ("description" description=STRING) ("type" type=AnswerType) ("required" req=INT)? ("Alternatives"
		//alternatives+=Alternatives*)? "}"
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"description" description=STRING
		public Group getGroup_2() { return cGroup_2; }

		//"description"
		public Keyword getDescriptionKeyword_2_0() { return cDescriptionKeyword_2_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }

		//"type" type=AnswerType
		public Group getGroup_3() { return cGroup_3; }

		//"type"
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }

		//type=AnswerType
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//AnswerType
		public RuleCall getTypeAnswerTypeEnumRuleCall_3_1_0() { return cTypeAnswerTypeEnumRuleCall_3_1_0; }

		//("required" req=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//"required"
		public Keyword getRequiredKeyword_4_0() { return cRequiredKeyword_4_0; }

		//req=INT
		public Assignment getReqAssignment_4_1() { return cReqAssignment_4_1; }

		//INT
		public RuleCall getReqINTTerminalRuleCall_4_1_0() { return cReqINTTerminalRuleCall_4_1_0; }

		//("Alternatives" alternatives+=Alternatives*)?
		public Group getGroup_5() { return cGroup_5; }

		//"Alternatives"
		public Keyword getAlternativesKeyword_5_0() { return cAlternativesKeyword_5_0; }

		//alternatives+=Alternatives*
		public Assignment getAlternativesAssignment_5_1() { return cAlternativesAssignment_5_1; }

		//Alternatives
		public RuleCall getAlternativesAlternativesParserRuleCall_5_1_0() { return cAlternativesAlternativesParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AlternativesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alternatives");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//Alternatives:
		//	"Option" description=STRING;
		public ParserRule getRule() { return rule; }

		//"Option" description=STRING
		public Group getGroup() { return cGroup; }

		//"Option"
		public Keyword getOptionKeyword_0() { return cOptionKeyword_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
	}
	
	
	public class ArtefactTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ArtefactType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIn_EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIn_InputKeyword_0_0 = (Keyword)cIn_EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOut_EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOut_OutputKeyword_1_0 = (Keyword)cOut_EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInout_EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInout_InoutputKeyword_2_0 = (Keyword)cInout_EnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ArtefactType:
		//	in_="input" | out_="output" | inout_="inoutput";
		public EnumRule getRule() { return rule; }

		//in_="input" | out_="output" | inout_="inoutput"
		public Alternatives getAlternatives() { return cAlternatives; }

		//in_="input"
		public EnumLiteralDeclaration getIn_EnumLiteralDeclaration_0() { return cIn_EnumLiteralDeclaration_0; }

		//"input"
		public Keyword getIn_InputKeyword_0_0() { return cIn_InputKeyword_0_0; }

		//out_="output"
		public EnumLiteralDeclaration getOut_EnumLiteralDeclaration_1() { return cOut_EnumLiteralDeclaration_1; }

		//"output"
		public Keyword getOut_OutputKeyword_1_0() { return cOut_OutputKeyword_1_0; }

		//inout_="inoutput"
		public EnumLiteralDeclaration getInout_EnumLiteralDeclaration_2() { return cInout_EnumLiteralDeclaration_2; }

		//"inoutput"
		public Keyword getInout_InoutputKeyword_2_0() { return cInout_InoutputKeyword_2_0; }
	}

	public class ColectTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ColectType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cContinuousEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cContinuousContinuousKeyword_0_0 = (Keyword)cContinuousEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntercalatedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntercalatedIntercalatedKeyword_1_0 = (Keyword)cIntercalatedEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ColectType:
		//	continuous | intercalated;
		public EnumRule getRule() { return rule; }

		//continuous | intercalated
		public Alternatives getAlternatives() { return cAlternatives; }

		//continuous
		public EnumLiteralDeclaration getContinuousEnumLiteralDeclaration_0() { return cContinuousEnumLiteralDeclaration_0; }

		//"continuous"
		public Keyword getContinuousContinuousKeyword_0_0() { return cContinuousContinuousKeyword_0_0; }

		//intercalated
		public EnumLiteralDeclaration getIntercalatedEnumLiteralDeclaration_1() { return cIntercalatedEnumLiteralDeclaration_1; }

		//"intercalated"
		public Keyword getIntercalatedIntercalatedKeyword_1_0() { return cIntercalatedIntercalatedKeyword_1_0; }
	}

	public class MetricUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MetricUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinutesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinutesMinutesKeyword_0_0 = (Keyword)cMinutesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUcEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUcUcKeyword_1_0 = (Keyword)cUcEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MetricUnit:
		//	minutes | uc;
		public EnumRule getRule() { return rule; }

		//minutes | uc
		public Alternatives getAlternatives() { return cAlternatives; }

		//minutes
		public EnumLiteralDeclaration getMinutesEnumLiteralDeclaration_0() { return cMinutesEnumLiteralDeclaration_0; }

		//"minutes"
		public Keyword getMinutesMinutesKeyword_0_0() { return cMinutesMinutesKeyword_0_0; }

		//uc
		public EnumLiteralDeclaration getUcEnumLiteralDeclaration_1() { return cUcEnumLiteralDeclaration_1; }

		//"uc"
		public Keyword getUcUcKeyword_1_0() { return cUcUcKeyword_1_0; }
	}

	public class DesignTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DesignType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCDREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCDRCRDCompletelyRandomizedDesignKeyword_0_0 = (Keyword)cCDREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRCBDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRCBDRCBDRandomizedCompleteBlockDesignKeyword_1_0 = (Keyword)cRCBDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLSLSLatinSquareKeyword_2_0 = (Keyword)cLSEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DesignType:
		//	CDR="CRD - Completely Randomized Design" | RCBD="RCBD - Randomized Complete Block Design" | LS="LS - Latin Square";
		public EnumRule getRule() { return rule; }

		//CDR="CRD - Completely Randomized Design" | RCBD="RCBD - Randomized Complete Block Design" | LS="LS - Latin Square"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CDR="CRD - Completely Randomized Design"
		public EnumLiteralDeclaration getCDREnumLiteralDeclaration_0() { return cCDREnumLiteralDeclaration_0; }

		//"CRD - Completely Randomized Design"
		public Keyword getCDRCRDCompletelyRandomizedDesignKeyword_0_0() { return cCDRCRDCompletelyRandomizedDesignKeyword_0_0; }

		//RCBD="RCBD - Randomized Complete Block Design"
		public EnumLiteralDeclaration getRCBDEnumLiteralDeclaration_1() { return cRCBDEnumLiteralDeclaration_1; }

		//"RCBD - Randomized Complete Block Design"
		public Keyword getRCBDRCBDRandomizedCompleteBlockDesignKeyword_1_0() { return cRCBDRCBDRandomizedCompleteBlockDesignKeyword_1_0; }

		//LS="LS - Latin Square"
		public EnumLiteralDeclaration getLSEnumLiteralDeclaration_2() { return cLSEnumLiteralDeclaration_2; }

		//"LS - Latin Square"
		public Keyword getLSLSLatinSquareKeyword_2_0() { return cLSLSLatinSquareKeyword_2_0; }
	}

	public class QuestionnaireTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "QuestionnaireType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPreEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPrePreKeyword_0_0 = (Keyword)cPreEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPosEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPosPosKeyword_1_0 = (Keyword)cPosEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum QuestionnaireType:
		//	pre="Pre" | pos="Pos";
		public EnumRule getRule() { return rule; }

		//pre="Pre" | pos="Pos"
		public Alternatives getAlternatives() { return cAlternatives; }

		//pre="Pre"
		public EnumLiteralDeclaration getPreEnumLiteralDeclaration_0() { return cPreEnumLiteralDeclaration_0; }

		//"Pre"
		public Keyword getPrePreKeyword_0_0() { return cPrePreKeyword_0_0; }

		//pos="Pos"
		public EnumLiteralDeclaration getPosEnumLiteralDeclaration_1() { return cPosEnumLiteralDeclaration_1; }

		//"Pos"
		public Keyword getPosPosKeyword_1_0() { return cPosPosKeyword_1_0; }
	}

	public class AnswerTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AnswerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTextEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTextTextKeyword_0_0 = (Keyword)cTextEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cParagraphTextEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cParagraphTextParagraphTextKeyword_1_0 = (Keyword)cParagraphTextEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMultipleChoiceEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMultipleChoiceMultipleChoiceKeyword_2_0 = (Keyword)cMultipleChoiceEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cComboBoxEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cComboBoxComboBoxKeyword_3_0 = (Keyword)cComboBoxEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCheckBoxesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCheckBoxesCheckBoxesKeyword_4_0 = (Keyword)cCheckBoxesEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cScaleEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cScaleScaleKeyword_5_0 = (Keyword)cScaleEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGridEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGridGridKeyword_6_0 = (Keyword)cGridEnumLiteralDeclaration_6.eContents().get(0);
		
		////Experimental Design
		//// Metrica
		//enum AnswerType:
		//	Text | ParagraphText="Paragraph Text" | MultipleChoice="Multiple Choice" | ComboBox | CheckBoxes | Scale | Grid;
		public EnumRule getRule() { return rule; }

		//Text //Experimental Design
		//// Metrica
		//| ParagraphText="Paragraph Text" | MultipleChoice="Multiple Choice" | ComboBox | CheckBoxes | Scale | Grid
		public Alternatives getAlternatives() { return cAlternatives; }

		//Text
		public EnumLiteralDeclaration getTextEnumLiteralDeclaration_0() { return cTextEnumLiteralDeclaration_0; }

		//"Text"
		public Keyword getTextTextKeyword_0_0() { return cTextTextKeyword_0_0; }

		//ParagraphText="Paragraph Text"
		public EnumLiteralDeclaration getParagraphTextEnumLiteralDeclaration_1() { return cParagraphTextEnumLiteralDeclaration_1; }

		//"Paragraph Text"
		public Keyword getParagraphTextParagraphTextKeyword_1_0() { return cParagraphTextParagraphTextKeyword_1_0; }

		//MultipleChoice="Multiple Choice"
		public EnumLiteralDeclaration getMultipleChoiceEnumLiteralDeclaration_2() { return cMultipleChoiceEnumLiteralDeclaration_2; }

		//"Multiple Choice"
		public Keyword getMultipleChoiceMultipleChoiceKeyword_2_0() { return cMultipleChoiceMultipleChoiceKeyword_2_0; }

		//ComboBox
		public EnumLiteralDeclaration getComboBoxEnumLiteralDeclaration_3() { return cComboBoxEnumLiteralDeclaration_3; }

		//"ComboBox"
		public Keyword getComboBoxComboBoxKeyword_3_0() { return cComboBoxComboBoxKeyword_3_0; }

		//CheckBoxes
		public EnumLiteralDeclaration getCheckBoxesEnumLiteralDeclaration_4() { return cCheckBoxesEnumLiteralDeclaration_4; }

		//"CheckBoxes"
		public Keyword getCheckBoxesCheckBoxesKeyword_4_0() { return cCheckBoxesCheckBoxesKeyword_4_0; }

		//Scale
		public EnumLiteralDeclaration getScaleEnumLiteralDeclaration_5() { return cScaleEnumLiteralDeclaration_5; }

		//"Scale"
		public Keyword getScaleScaleKeyword_5_0() { return cScaleScaleKeyword_5_0; }

		////Experimental Design
		//// Metrica
		//Grid
		public EnumLiteralDeclaration getGridEnumLiteralDeclaration_6() { return cGridEnumLiteralDeclaration_6; }

		////Experimental Design
		//// Metrica
		//"Grid"
		public Keyword getGridGridKeyword_6_0() { return cGridGridKeyword_6_0; }
	}
	
	private ModelElements pModel;
	private ExperimentElementElements pExperimentElement;
	private ProcessElements pProcess;
	private ActivityElements pActivity;
	private TaskElements pTask;
	private RoleElements pRole;
	private ArtefactElements pArtefact;
	private ArtefactTypeElements unknownRuleArtefactType;
	private MetricsElements pMetrics;
	private DetailElements pDetail;
	private ActivityMetricElements pActivityMetric;
	private TaskMetricElements pTaskMetric;
	private ArtefactMetricElements pArtefactMetric;
	private ColectTypeElements unknownRuleColectType;
	private MetricUnitElements unknownRuleMetricUnit;
	private ExperimentalPlanElements pExperimentalPlan;
	private ParameterElements pParameter;
	private FactorElements pFactor;
	private LevelsElements pLevels;
	private LinkElements pLink;
	private DesignTypeElements unknownRuleDesignType;
	private QuestionnaireElements pQuestionnaire;
	private QuestionnaireTypeElements unknownRuleQuestionnaireType;
	private QuestionElements pQuestion;
	private AlternativesElements pAlternatives;
	private AnswerTypeElements unknownRuleAnswerType;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=ExperimentElement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ExperimentElement:
	//	"Experiment" name=STRING process+=Process* metrics+=Metrics* ("Experimental Plan" experiments+=ExperimentalPlan*)?
	//	("Questionnaires" questionnaire+=Questionnaire*)?;
	public ExperimentElementElements getExperimentElementAccess() {
		return (pExperimentElement != null) ? pExperimentElement : (pExperimentElement = new ExperimentElementElements());
	}
	
	public ParserRule getExperimentElementRule() {
		return getExperimentElementAccess().getRule();
	}

	////WorkbreakdownStructure	
	//Process:
	//	"Process" name=STRING "{" activities+=Activity* "}";
	public ProcessElements getProcessAccess() {
		return (pProcess != null) ? pProcess : (pProcess = new ProcessElements());
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	//Activity:
	//	"Activity" name=STRING description=STRING next+=[Activity|STRING]? artefacts+=Artefact? role+=Role? ("{" tasks+=Task*
	//	"}")?;
	public ActivityElements getActivityAccess() {
		return (pActivity != null) ? pActivity : (pActivity = new ActivityElements());
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}

	//Task:
	//	"Task" name=STRING "description" description=STRING ("artefacts" artefacts+=Artefact*)? role+=Role? ";";
	public TaskElements getTaskAccess() {
		return (pTask != null) ? pTask : (pTask = new TaskElements());
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}

	//Role:
	//	"Role" name=STRING ";";
	public RoleElements getRoleAccess() {
		return (pRole != null) ? pRole : (pRole = new RoleElements());
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//Artefact:
	//	"artefact" name=STRING "description" description=STRING "type" type=ArtefactType ";";
	public ArtefactElements getArtefactAccess() {
		return (pArtefact != null) ? pArtefact : (pArtefact = new ArtefactElements());
	}
	
	public ParserRule getArtefactRule() {
		return getArtefactAccess().getRule();
	}

	//enum ArtefactType:
	//	in_="input" | out_="output" | inout_="inoutput";
	public ArtefactTypeElements getArtefactTypeAccess() {
		return (unknownRuleArtefactType != null) ? unknownRuleArtefactType : (unknownRuleArtefactType = new ArtefactTypeElements());
	}
	
	public EnumRule getArtefactTypeRule() {
		return getArtefactTypeAccess().getRule();
	}

	////Metric Definition	
	//Metrics:
	//	"Metric" name=STRING "relates" relatesTo=[Process|STRING] "{" ("description" description=STRING) ("form"
	//	form=ColectType)? ("unit" unit=MetricUnit)? detail+=Detail "}";
	public MetricsElements getMetricsAccess() {
		return (pMetrics != null) ? pMetrics : (pMetrics = new MetricsElements());
	}
	
	public ParserRule getMetricsRule() {
		return getMetricsAccess().getRule();
	}

	//Detail:
	//	ActivityMetric | TaskMetric | ArtefactMetric;
	public DetailElements getDetailAccess() {
		return (pDetail != null) ? pDetail : (pDetail = new DetailElements());
	}
	
	public ParserRule getDetailRule() {
		return getDetailAccess().getRule();
	}

	//ActivityMetric:
	//	("activityBegin" activityBegin=[Activity|STRING]) ("activityEnd" activityEnd=[Activity|STRING])? //opcional
	//;
	public ActivityMetricElements getActivityMetricAccess() {
		return (pActivityMetric != null) ? pActivityMetric : (pActivityMetric = new ActivityMetricElements());
	}
	
	public ParserRule getActivityMetricRule() {
		return getActivityMetricAccess().getRule();
	}

	//TaskMetric:
	//	"tasks" tasks+=[Task|STRING]*;
	public TaskMetricElements getTaskMetricAccess() {
		return (pTaskMetric != null) ? pTaskMetric : (pTaskMetric = new TaskMetricElements());
	}
	
	public ParserRule getTaskMetricRule() {
		return getTaskMetricAccess().getRule();
	}

	//ArtefactMetric:
	//	"artefacts" name=STRING artefacts=[Artefact|STRING]*;
	public ArtefactMetricElements getArtefactMetricAccess() {
		return (pArtefactMetric != null) ? pArtefactMetric : (pArtefactMetric = new ArtefactMetricElements());
	}
	
	public ParserRule getArtefactMetricRule() {
		return getArtefactMetricAccess().getRule();
	}

	//enum ColectType:
	//	continuous | intercalated;
	public ColectTypeElements getColectTypeAccess() {
		return (unknownRuleColectType != null) ? unknownRuleColectType : (unknownRuleColectType = new ColectTypeElements());
	}
	
	public EnumRule getColectTypeRule() {
		return getColectTypeAccess().getRule();
	}

	//enum MetricUnit:
	//	minutes | uc;
	public MetricUnitElements getMetricUnitAccess() {
		return (unknownRuleMetricUnit != null) ? unknownRuleMetricUnit : (unknownRuleMetricUnit = new MetricUnitElements());
	}
	
	public EnumRule getMetricUnitRule() {
		return getMetricUnitAccess().getRule();
	}

	////CRD � Completely Randomized Design
	////RCBD � Randomized Complete Block Design
	////LS � Latin Square
	//ExperimentalPlan:
	//	"Design" name=STRING "type" type=DesignType "{" parameter+=Parameter* factor+=Factor* "Internal Replication "
	//	internalReplication=INT link+=Link* "}";
	public ExperimentalPlanElements getExperimentalPlanAccess() {
		return (pExperimentalPlan != null) ? pExperimentalPlan : (pExperimentalPlan = new ExperimentalPlanElements());
	}
	
	public ParserRule getExperimentalPlanRule() {
		return getExperimentalPlanAccess().getRule();
	}

	//Parameter:
	//	"Parameter" variable=STRING "=" value=STRING;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Factor:
	//	"Factor" name=STRING "isDesiredVariation" isDesiredVariation=("True" | "False") level+=Levels* ";";
	public FactorElements getFactorAccess() {
		return (pFactor != null) ? pFactor : (pFactor = new FactorElements());
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//Levels:
	//	"Level" name=STRING ";";
	public LevelsElements getLevelsAccess() {
		return (pLevels != null) ? pLevels : (pLevels = new LevelsElements());
	}
	
	public ParserRule getLevelsRule() {
		return getLevelsAccess().getRule();
	}

	//Link:
	//	"Link" procedure+=[Process|STRING] "to" treatment+=[Levels|STRING]*;
	public LinkElements getLinkAccess() {
		return (pLink != null) ? pLink : (pLink = new LinkElements());
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//enum DesignType:
	//	CDR="CRD - Completely Randomized Design" | RCBD="RCBD - Randomized Complete Block Design" | LS="LS - Latin Square";
	public DesignTypeElements getDesignTypeAccess() {
		return (unknownRuleDesignType != null) ? unknownRuleDesignType : (unknownRuleDesignType = new DesignTypeElements());
	}
	
	public EnumRule getDesignTypeRule() {
		return getDesignTypeAccess().getRule();
	}

	//Questionnaire:
	//	"Questionnaire" name=STRING ("relates" relatesTo+=[Process|STRING]*)? "type" questionnaireType=QuestionnaireType "{"
	//	question+=Question* "};";
	public QuestionnaireElements getQuestionnaireAccess() {
		return (pQuestionnaire != null) ? pQuestionnaire : (pQuestionnaire = new QuestionnaireElements());
	}
	
	public ParserRule getQuestionnaireRule() {
		return getQuestionnaireAccess().getRule();
	}

	//enum QuestionnaireType:
	//	pre="Pre" | pos="Pos";
	public QuestionnaireTypeElements getQuestionnaireTypeAccess() {
		return (unknownRuleQuestionnaireType != null) ? unknownRuleQuestionnaireType : (unknownRuleQuestionnaireType = new QuestionnaireTypeElements());
	}
	
	public EnumRule getQuestionnaireTypeRule() {
		return getQuestionnaireTypeAccess().getRule();
	}

	//Question:
	//	name=STRING "{" ("description" description=STRING) ("type" type=AnswerType) ("required" req=INT)? ("Alternatives"
	//	alternatives+=Alternatives*)? "}";
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Alternatives:
	//	"Option" description=STRING;
	public AlternativesElements getAlternativesAccess() {
		return (pAlternatives != null) ? pAlternatives : (pAlternatives = new AlternativesElements());
	}
	
	public ParserRule getAlternativesRule() {
		return getAlternativesAccess().getRule();
	}

	////Experimental Design
	//// Metrica
	//enum AnswerType:
	//	Text | ParagraphText="Paragraph Text" | MultipleChoice="Multiple Choice" | ComboBox | CheckBoxes | Scale | Grid;
	public AnswerTypeElements getAnswerTypeAccess() {
		return (unknownRuleAnswerType != null) ? unknownRuleAnswerType : (unknownRuleAnswerType = new AnswerTypeElements());
	}
	
	public EnumRule getAnswerTypeRule() {
		return getAnswerTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
