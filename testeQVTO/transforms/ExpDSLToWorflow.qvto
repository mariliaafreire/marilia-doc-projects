modeltype DSL  uses expDSL('http://www.xtext.org/project/ExpDSL');
modeltype JPDL uses jpdl31('urn:jbpm.org:jpdl-3.1');


transformation dslToWorflow(in dsl : DSL, out outModel: JPDL);
	
main() {
	
//TODO INICIO DA CADEIA DE TRANSF. APÓS ALTERAÇÕES
    log('starting transformation...');
    dsl.rootObjects()[DSL::Model]->map model2model();
	log('ending transformation...');
}

mapping DSL::Model::model2model():JPDL::Model{
	elements := self.elements->map model2DSLModel();
}
mapping DSL::ExperimentElement::model2DSLModel():JPDL::DocumentRoot	 {
   log('Starts Model2Model');
   //calcular número de workflows
  
   var plan : DSL::ExperimentalPlan;
   plan := self.experiments->at(1);
   log('Design name ' + self.experiments->at(1).name);
   var number: Integer;
   number := workNumber(plan.oclAsType(ExperimentalPlan).factor);

  //Gerar o Workflow pra cada Processo do experimento
  var i: Integer;
  i:=0;
    processDefinition := self.process->map processToProcessDefinition(self.metrics,number)->asOrderedSet();

 
  
  log('Finished Model2Model');
}
	

mapping DSL::Process::processToProcessDefinition(in mets:OrderedSet(DSL::Metrics),in num: Integer) :JPDL::ProcessDefinitionType{
  
  	//cria o nó inicial e final do processo
	
  result.startState := object JPDL::StartStateType { 
				name := 'Starting'; 
				
				var act: Set(Activity);
				act := self.allInstances(DSL::Activity);
				
				act->forEach(a) {
					var comp := a.repr();
					var res := isSuccessor(comp, self.activities); //if the activity has no other refering to her as next, it is a first activity...
						if(res.repr().equalsIgnoreCase('false')) then {
						//create a transition from start to this activity...	
						var start_t := object JPDL::TransitionType{
							name := 'startTransition'+a.name;
							to := a.name;
						};
						
			       	  transition += Sequence{start_t}
					
					}endif;
				
				}
				
  };
  
  	
  result.endState := object JPDL::EndStateType { 
				name := 'End'; 
				
  };
  
  // cria swimlane com o papel determinado para a primeira atividade, caso exista.
  	result.swimlane := object JPDL::SwimlaneType { 
        
  		assignment := object JPDL::AssignmentType {
			actorId := getProcessRole(self);
		};
		
  };
  name := self.name;
  quantity := num;
  taskNode := self.activities->map act2taskNode(mets,self)->asOrderedSet();
  
  //links
    self.allInstances(DSL::Activity)-> map ligarAoNoFinal(result)->asOrderedSet();
	//self.allInstances(DSL::Activity)-> map ligarAosJoinsAndStart(result)->asOrderedSet(); 
}


/*
mapping DSL::Process::experiment2process() :JPDL::ProcessDefinitionType {
 log('t');
  name := self.name;
  //self.metrics
  taskNode:= self.activities->map act2taskNode(self.metrics)->asOrderedSet();
  //task := self.process->map u()->asOrderedSet(); 
  
}
*/

mapping DSL::Activity::act2taskNode(in metrics:OrderedSet(DSL::Metrics), in pro:DSL::Process): JPDL::TaskNodeType{
	name := self.name;
	description := self.description;
	artefacts := self.artefacts->map artefact2artefact()->asOrderedSet();
	// tratar última atividade
	//TODO
	self.next->forEach(i){
		transition += object JPDL::TransitionType{
			name := self.description+'_Transition';
			to := i.name;
		}//end_create_transactions
	};//end forEach next
	
   var nomeInput: String;
   var i :=0;
   metrics->forEach(ele) {
   	
    	
   	if(ele.relatesTo.name.equalsIgnoreCase(pro.name)) then { // check if the metric is set to this process
   	  ele.detail->forEach(j){ 
   	  	if(j.metaClassName().equalsIgnoreCase("ActivityMetric")) then {
   	  		var part1:= j.oclAsType(ActivityMetric).activityBegin.name.equalsIgnoreCase(self.name);
   			var part2:= j.oclAsType(ActivityMetric).activityEnd.name.equalsIgnoreCase(self.name);
   			var part3:= checkBetween(j.oclAsType(ActivityMetric).activityBegin.name,j.oclAsType(ActivityMetric).activityEnd.name,self.name, pro);
            if((part1 or part2 or part3)) then {// and not part4))then {
   				result.event += Sequence {
   					object JPDL::EventType{
   					type:="task-end";
   					
   					action+=Sequence {
   						object JPDL::ActionType{
   							
   						refName := ele.name; //TODO:inserir se inicia ou termina aqui
   						name := ele.name;
   						_class := "br.ufrn.dimap.ppgsc.".concat(ele.name).concat("ActionHandler");
   				
   						}
   					}
   						
   					}
   				}
   			} endif;
   	  	}endif;
   	 	
   	  };
   	  
   	  }endif;    
  };
   //TODO => FALTA PASSAR TODAS AS MÉTRICAS NO MÉTODO ACIMA E FILTRAR PARA ENVIAR PARA ESSE MÉTODO SÓ AS TASKMETRICS
   task := self.tasks->map task2task(metrics)->asOrderedSet();
}

mapping DSL::Task::task2task(in mets:OrderedSet(DSL::Metrics)):JPDL::TaskType{
	name := self.name;
	description := self.description;
	artefacts := self.artefacts->map artefact2artefact()->asOrderedSet();
	mets->forEach(ele) 
   { 		
   	  ele.detail->forEach(j){
   	  	if(j.metaClassName().equalsIgnoreCase("TaskMetric")) then {
   	  		
   	  	 var tasksNames := j.oclAsType(TaskMetric).tasks;
   	  	 j.oclAsType(TaskMetric).tasks->forEach(t){
   	  	 	if(t.name.equalsIgnoreCase(self.name)) then{
   	  	 		result.event += Sequence {
   					object JPDL::EventType{
   					type:="task-end";
   					
   					action+=Sequence {
   						object JPDL::ActionType{
   						refName := t.name;
   						name := t.name;
   						_class := "br.ufrn.dimap.ppgsc.".concat(t.name).concat("ActionHandler");
   				//INSERIR UM ID EM TASK
   						}
   					}
   						
   					}
   				}
   	  	 	}endif;
   	  	 };
   	  		
   	  	}endif;
   	  	
   	  };
   	  };
}
	
mapping DSL::Artefact::artefact2artefact():JPDL::Artefact{
	name := self.name;
   
   description := self.description;
 
	if(self.type = DSL::ArtefactType::in_) then {
		result.Type := JPDL::ArtefactType::input.repr();
		
	}endif;
		
	if (self.type = DSL::ArtefactType::out_)then {

		result.Type:= JPDL::ArtefactType::input.repr();
	}endif;
		
	if (self.type = DSL::ArtefactType::inout_)then {

		result.Type:= JPDL::ArtefactType::inoutput.repr();
	}endif;
	
}




//Create links to ENDNODE
mapping DSL::Activity::ligarAoNoFinal(inout process: JPDL::ProcessDefinitionType){

		// cria transições para o fim...
		var i := getTransitionToFim(process);
		
		//It have not been used yet... for while
		if(i>1)then{
		
		var join := object JPDL::JoinType {
				name := 'joinEnd';
				transition := object JPDL::TransitionType{
					name := 'to_EndTransition';
					to:= 'End';
				};
			};
			process.join += Sequence{join};
			process.allInstances(JPDL::TaskNodeType)->forEach(task) {
			if(task.transition->isEmpty())then{
				var trst := object JPDL::TransitionType {
				name := task.name + 'transition';
				to := 'joinEnd';
			};
			task.transition += trst;
			}endif;
		};
			
		}else {
		
		process.allInstances(JPDL::TaskNodeType)->forEach(task) {
			if(task.transition->isEmpty())then{
				var trst := object JPDL::TransitionType {
				name := task.name + 'transition';
				to := 'End';
			};
			task.transition += trst;
			}endif;
		};
		}endif;
	
}


/*
mapping DSL::Activity::ligarAosJoinsAndStart(inout process: JPDL::ProcessDefinitionType){
		
		
		// CRIA TRANSIÇÕES FROM STARTSTATE
		if (self.linkToPredecessor->isEmpty())then {
		   log('startTransition');
			var i := 1;
			process.allInstances(JPDL::StartStateType)->forEach(ativ){
			log('estado inicial');
			var trst := object JPDL::TransitionType {
				name := 'start' + self.name + 'transition';
				to := self.name;
			};
			ativ.transition += trst;
			}
		}endif;
		
		// For last... create transitions to node END...
		
		process.allInstances(JPDL::TaskNodeType)->forEach(task) {
			if(task.transition->size() > 1)then{
				var trst := object JPDL::TransitionType {
				name := task.name + 'transition';
				to := 'End';
			};
			task.transition += trst;
			}endif;
		};
	
}

*/
/************
 *  QUERYS  *
 ************/


 query getTransitionToFim(in process: JPDL::ProcessDefinitionType): Integer{
    var i := 0;
    process.allInstances(JPDL::TaskNodeType)->forEach(task) {
			if(task.transition->isEmpty())then{
				i:= i +1;
		
			}endif;
		};
    return i;
 	
 }

//check if activity is between begin and end

query checkBetween(in begin: String, in end_: String, in atual :String, in pro:DSL::Process):Boolean{
	
 if( atual.equalsIgnoreCase(begin) or atual.equalsIgnoreCase(end_))then {
 	return true;
 }else {
 	var atividadeAtual : Activity;
 	//pegar o conjunto de todas as atividades do processo...
	//pega a primeira e vai andando pra ver se é o begin, se sim, até chegar na end pega
	atividadeAtual = getActivity(atual,pro);
	if(atividadeAtual.next != null) then{
	   atividadeAtual.next->forEach(act){ 
           checkBetween(begin,end_,act.name,pro);
     };
     }endif;
	    
 }endif;
 
/* var resultado := false;
  log("ATIVIDADE Atual>> "+ atual + " primeira: " + begin + " ultima "+end_);
	if(atual.equalsIgnoreCase(begin) or atual.equalsIgnoreCase(end_))then{
		
	   log("Sim!");
	   return true;
	}
	else{
	// multiplas predecessoras 
	var atividadeAtual : Activity;
	atividadeAtual = getActivity(atual,pro);
	var nextAct := atividadeAtual.next->at(0).oclAsType(Activity).name;
	atividadeAtual.next->forEach(act){ 
      checkBetween(begin,end_,act,pro);
     }
	
	
		
	p->forEach (i) {
	     var anterior = getActivity(i. ,epfSpec);
		log("Nome Atividade Anterior: " + next.name);
	    resultado := (checkAncestral(i.next,metrica,epfSpec));
	    if (resultado = true) then{
	    	return true
	    }endif;
	};
	}endif;
	return resultado;
*/	
return false;
}

//MÉTODO QUE RETORNA A ATIVIDADE A PARTIR DO NOME
query getActivity(in name: String, in pro:DSL::Process):DSL::Activity {
	var activities : Set(DSL::Activity);
	activities := pro.allInstances(Activity);
	 activities->forEach(i){
 			
 		var exp := name.equalsIgnoreCase(i.oclAsType(Activity).name);
  		if (exp) then {
  			return i;
 		 }endif;
  };
}

query workNumber(in factors: OrderedSet(DSL::Factor)): Integer{

   var total: Integer;
   total:=0;
   var max: Integer;
   max := -1;
   factors->forEach(f){
   		if(f._main.equalsIgnoreCase('False'))then{
   			f.level->forEach (l) {
   			 	total:= total +1;
   			};
   			if(total>max)then{
   				max:=total;
   			}endif;
   		}endif;
  	 };
    return max;
	
}

query getProcessRole(in pro: DSL::Process): String {
	//alwasy return the role from the first process activity or task ...
	var act := pro.activities;
	var role:= 'unknown';
	if (act->notEmpty())then {
		var roles := act.role;
		if (roles->notEmpty()) then {
			role := roles->at(1).name;
		}else  { // case role has not been specified to activity, it can be specified to tasks.
			if(act.tasks->notEmpty())then{
				var role2 := act.tasks.role;
				role := role2->at(1).name;
			}endif;
		}endif;
	}endif;
	return role;
}

//It verify if a task is setted as next for any other task, else it activity is the one of the firsts and returns false...
query isSuccessor(in rep: String,in act: Set(Activity)): Boolean {
	
	var x:=0;
	act->forEach(i){
	    i.next->forEach(j){
			if(j.repr().equalsIgnoreCase(rep))then{
			x:= x +1;
		}endif;
	}
	};
	if(x>0)then{
		return true;
	} else {
		return false;
	}endif;
	
}
