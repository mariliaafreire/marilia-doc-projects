/*
* generated by Xtext
*/
grammar InternalExpDslv2;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package br.ufrn.dimap.ase.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.ufrn.dimap.ase.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.ufrn.dimap.ase.dsl.services.ExpDslv2GrammarAccess;

}

@parser::members {

 	private ExpDslv2GrammarAccess grammarAccess;
 	
    public InternalExpDslv2Parser(TokenStream input, ExpDslv2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ExpDslv2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getElementsExperimentElementParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleExperimentElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"ExperimentElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleExperimentElement
entryRuleExperimentElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExperimentElementRule()); }
	 iv_ruleExperimentElement=ruleExperimentElement 
	 { $current=$iv_ruleExperimentElement.current; } 
	 EOF 
;

// Rule ExperimentElement
ruleExperimentElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Experiment' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExperimentElementAccess().getExperimentKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getExperimentElementAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)(	otherlv_2='Experimental Plan' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExperimentElementAccess().getExperimentalPlanKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentElementAccess().getExperimentsExperimentalPlanParserRuleCall_2_1_0()); 
	    }
		lv_experiments_3_0=ruleExperimentalPlan		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentElementRule());
	        }
       		add(
       			$current, 
       			"experiments",
        		lv_experiments_3_0, 
        		"ExperimentalPlan");
	        afterParserOrEnumRuleCall();
	    }

)
)*)(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentElementAccess().getProcessProcessParserRuleCall_3_0()); 
	    }
		lv_process_4_0=ruleProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentElementRule());
	        }
       		add(
       			$current, 
       			"process",
        		lv_process_4_0, 
        		"Process");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentElementAccess().getMetricsMetricsParserRuleCall_4_0()); 
	    }
		lv_metrics_5_0=ruleMetrics		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentElementRule());
	        }
       		add(
       			$current, 
       			"metrics",
        		lv_metrics_5_0, 
        		"Metrics");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_6='Questionnaires' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExperimentElementAccess().getQuestionnairesKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentElementAccess().getQuestionnaireQuestionnaireParserRuleCall_5_1_0()); 
	    }
		lv_questionnaire_7_0=ruleQuestionnaire		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentElementRule());
	        }
       		add(
       			$current, 
       			"questionnaire",
        		lv_questionnaire_7_0, 
        		"Questionnaire");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleExperimentalPlan
entryRuleExperimentalPlan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExperimentalPlanRule()); }
	 iv_ruleExperimentalPlan=ruleExperimentalPlan 
	 { $current=$iv_ruleExperimentalPlan.current; } 
	 EOF 
;

// Rule ExperimentalPlan
ruleExperimentalPlan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Goals' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExperimentalPlanAccess().getGoalsKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExperimentalPlanAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getGoalGoalParserRuleCall_2_0()); 
	    }
		lv_goal_2_0=ruleGoal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentalPlanRule());
	        }
       		add(
       			$current, 
       			"goal",
        		lv_goal_2_0, 
        		"Goal");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExperimentalPlanAccess().getRightCurlyBracketKeyword_3());
    }
	otherlv_4='DesignOfExperiment' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExperimentalPlanAccess().getDesignOfExperimentKeyword_4());
    }
	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExperimentalPlanAccess().getEqualsSignKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getTypeDesignTypeEnumRuleCall_6_0()); 
	    }
		lv_type_6_0=ruleDesignType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentalPlanRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"DesignType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExperimentalPlanAccess().getLeftCurlyBracketKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getParameterParameterParserRuleCall_8_0()); 
	    }
		lv_parameter_8_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentalPlanRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_8_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getDependentVariableDependentVariableParserRuleCall_9_0()); 
	    }
		lv_dependentVariable_9_0=ruleDependentVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentalPlanRule());
	        }
       		add(
       			$current, 
       			"dependentVariable",
        		lv_dependentVariable_9_0, 
        		"DependentVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getFactorFactorParserRuleCall_10_0()); 
	    }
		lv_factor_10_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentalPlanRule());
	        }
       		add(
       			$current, 
       			"factor",
        		lv_factor_10_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='Statistical Analysis Technique' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getExperimentalPlanAccess().getStatisticalAnalysisTechniqueKeyword_11());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentalPlanRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getTohypothesesHypothesesCrossReference_12_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getExperimentalPlanAccess().getColonKeyword_12_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExperimentalPlanAccess().getTechniqueAnalysisTechiqueTypeEnumRuleCall_12_2_0()); 
	    }
		lv_Technique_14_0=ruleAnalysisTechiqueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExperimentalPlanRule());
	        }
       		add(
       			$current, 
       			"Technique",
        		lv_Technique_14_0, 
        		"AnalysisTechiqueType");
	        afterParserOrEnumRuleCall();
	    }

)
)*)*	otherlv_15='Internal Replication ' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getExperimentalPlanAccess().getInternalReplicationKeyword_13());
    }
(
(
		lv_internalReplication_16_0=RULE_INT
		{
			newLeafNode(lv_internalReplication_16_0, grammarAccess.getExperimentalPlanAccess().getInternalReplicationINTTerminalRuleCall_14_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExperimentalPlanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"internalReplication",
        		lv_internalReplication_16_0, 
        		"INT");
	    }

)
)	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getExperimentalPlanAccess().getRightCurlyBracketKeyword_15());
    }
)
;





// Entry rule entryRuleGoal
entryRuleGoal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGoalRule()); }
	 iv_ruleGoal=ruleGoal 
	 { $current=$iv_ruleGoal.current; } 
	 EOF 
;

// Rule Goal
ruleGoal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getGoalAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGoalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		lv_description_1_0=RULE_STRING
		{
			newLeafNode(lv_description_1_0, grammarAccess.getGoalAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGoalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGoalAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGoalAccess().getHypothesesHypothesesParserRuleCall_3_0()); 
	    }
		lv_hypotheses_3_0=ruleHypotheses		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGoalRule());
	        }
       		add(
       			$current, 
       			"hypotheses",
        		lv_hypotheses_3_0, 
        		"Hypotheses");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getGoalAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleHypotheses
entryRuleHypotheses returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHypothesesRule()); }
	 iv_ruleHypotheses=ruleHypotheses 
	 { $current=$iv_ruleHypotheses.current; } 
	 EOF 
;

// Rule Hypotheses
ruleHypotheses returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getHypothesesAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHypothesesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		lv_description_1_0=RULE_STRING
		{
			newLeafNode(lv_description_1_0, grammarAccess.getHypothesesAccess().getDescriptionSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHypothesesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_1_0, 
        		"STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getHypothesesAccess().getTypeHypothesisTypeEnumRuleCall_0_2_0()); 
	    }
		lv_type_2_0=ruleHypothesisType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHypothesesRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"HypothesisType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHypothesesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getHypothesesAccess().getDependentVariableDependentVariableCrossReference_0_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getHypothesesAccess().getLeftParenthesisKeyword_0_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHypothesesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getHypothesesAccess().getLevelsLevelsCrossReference_0_5_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getHypothesesAccess().getRightParenthesisKeyword_0_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHypothesesAccess().getOperatorOperatorTypeEnumRuleCall_0_7_0()); 
	    }
		lv_operator_7_0=ruleOperatorType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHypothesesRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_7_0, 
        		"OperatorType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHypothesesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getHypothesesAccess().getDependentVariableDependentVariableCrossReference_0_8_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getHypothesesAccess().getLeftParenthesisKeyword_0_9());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHypothesesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getHypothesesAccess().getLevelsLevelsCrossReference_0_10_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getHypothesesAccess().getRightParenthesisKeyword_0_11());
    }
)
    |((
(
		lv_name_12_0=RULE_ID
		{
			newLeafNode(lv_name_12_0, grammarAccess.getHypothesesAccess().getNameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHypothesesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_12_0, 
        		"ID");
	    }

)
)	otherlv_13='(' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getHypothesesAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHypothesesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getHypothesesAccess().getDependentVariableDependentVariableCrossReference_1_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getHypothesesAccess().getRelationRelationTypeEnumRuleCall_1_3_0()); 
	    }
		lv_relation_15_0=ruleRelationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHypothesesRule());
	        }
       		set(
       			$current, 
       			"relation",
        		lv_relation_15_0, 
        		"RelationType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHypothesesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getHypothesesAccess().getFactorFactorCrossReference_1_4_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_17=')' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getHypothesesAccess().getRightParenthesisKeyword_1_5());
    }
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Parameter' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getParameterKeyword_0());
    }
(
(
		lv_variable_1_0=RULE_ID
		{
			newLeafNode(lv_variable_1_0, grammarAccess.getParameterAccess().getVariableIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_value_3_0=RULE_STRING
		{
			newLeafNode(lv_value_3_0, grammarAccess.getParameterAccess().getValueSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleDependentVariable
entryRuleDependentVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDependentVariableRule()); }
	 iv_ruleDependentVariable=ruleDependentVariable 
	 { $current=$iv_ruleDependentVariable.current; } 
	 EOF 
;

// Rule DependentVariable
ruleDependentVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Dependent Variable' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDependentVariableAccess().getDependentVariableKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDependentVariableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDependentVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getDependentVariableAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDependentVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDependentVariableRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDependentVariableAccess().getMetricsMetricsCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	 iv_ruleFactor=ruleFactor 
	 { $current=$iv_ruleFactor.current; } 
	 EOF 
;

// Rule Factor
ruleFactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Factor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFactorAccess().getFactorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFactorAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='isDesiredVariation' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFactorAccess().getIsDesiredVariationKeyword_2());
    }
(
(
(
		lv_isDesiredVariation_3_1=	'True' 
    {
        newLeafNode(lv_isDesiredVariation_3_1, grammarAccess.getFactorAccess().getIsDesiredVariationTrueKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed($current, "isDesiredVariation", lv_isDesiredVariation_3_1, null);
	    }

    |		lv_isDesiredVariation_3_2=	'False' 
    {
        newLeafNode(lv_isDesiredVariation_3_2, grammarAccess.getFactorAccess().getIsDesiredVariationFalseKeyword_3_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactorRule());
	        }
       		setWithLastConsumed($current, "isDesiredVariation", lv_isDesiredVariation_3_2, null);
	    }

)

)
)(	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFactorAccess().getLeftCurlyBracketKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getLevelLevelsParserRuleCall_4_1_0()); 
	    }
		lv_level_5_0=ruleLevels		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		add(
       			$current, 
       			"level",
        		lv_level_5_0, 
        		"Levels");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFactorAccess().getRightCurlyBracketKeyword_4_2());
    }
)?)
;





// Entry rule entryRuleLevels
entryRuleLevels returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLevelsRule()); }
	 iv_ruleLevels=ruleLevels 
	 { $current=$iv_ruleLevels.current; } 
	 EOF 
;

// Rule Levels
ruleLevels returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLevelsAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLevelsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	 iv_ruleProcess=ruleProcess 
	 { $current=$iv_ruleProcess.current; } 
	 EOF 
;

// Rule Process
ruleProcess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Process' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcessAccess().getProcessKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcessAccess().getToKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getTreatmentLevelsCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_5='Role' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProcessAccess().getRoleKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getRoleRoleTypeEnumRuleCall_4_1_0()); 
	    }
		lv_role_6_0=ruleRoleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		add(
       			$current, 
       			"role",
        		lv_role_6_0, 
        		"RoleType");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getTaskTaskParserRuleCall_5_0()); 
	    }
		lv_task_7_0=ruleTask		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		add(
       			$current, 
       			"task",
        		lv_task_7_0, 
        		"Task");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	 iv_ruleTask=ruleTask 
	 { $current=$iv_ruleTask.current; } 
	 EOF 
;

// Rule Task
ruleTask returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Task' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTaskKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='description' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTaskAccess().getDescriptionKeyword_2());
    }
(
(
		lv_description_3_0=RULE_STRING
		{
			newLeafNode(lv_description_3_0, grammarAccess.getTaskAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_3_0, 
        		"STRING");
	    }

)
)(	otherlv_4='to' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTaskAccess().getToKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getNextTaskCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_6='Role' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTaskAccess().getRoleKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getRoleRoleTypeEnumRuleCall_5_1_0()); 
	    }
		lv_role_7_0=ruleRoleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"role",
        		lv_role_7_0, 
        		"RoleType");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTaskAccess().getLeftCurlyBracketKeyword_6());
    }
(	otherlv_9='var' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTaskAccess().getVarKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getCollectDataCollectedDataCrossReference_7_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_11='artefacts' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTaskAccess().getArtefactsKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getArtefactsArtefactParserRuleCall_8_1_0()); 
	    }
		lv_artefacts_12_0=ruleArtefact		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"artefacts",
        		lv_artefacts_12_0, 
        		"Artefact");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_13='quest' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTaskAccess().getQuestKeyword_9_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getQuestionnaireQuestionnaireCrossReference_9_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTaskAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleArtefact
entryRuleArtefact returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArtefactRule()); }
	 iv_ruleArtefact=ruleArtefact 
	 { $current=$iv_ruleArtefact.current; } 
	 EOF 
;

// Rule Artefact
ruleArtefact returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getArtefactAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArtefactRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='description' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArtefactAccess().getDescriptionKeyword_1());
    }
(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getArtefactAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArtefactRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
)	otherlv_3='type' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArtefactAccess().getTypeKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArtefactAccess().getTypeArtefactTypeEnumRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleArtefactType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArtefactRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"ArtefactType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMetrics
entryRuleMetrics returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetricsRule()); }
	 iv_ruleMetrics=ruleMetrics 
	 { $current=$iv_ruleMetrics.current; } 
	 EOF 
;

// Rule Metrics
ruleMetrics returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Metric' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMetricsAccess().getMetricKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMetricsAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetricsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='relates' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMetricsAccess().getRelatesKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetricsRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getMetricsAccess().getRelatesToProcessCrossReference_3_0()); 
	}

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMetricsAccess().getLeftCurlyBracketKeyword_4());
    }
(	otherlv_5='description' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMetricsAccess().getDescriptionKeyword_5_0());
    }
(
(
		lv_description_6_0=RULE_STRING
		{
			newLeafNode(lv_description_6_0, grammarAccess.getMetricsAccess().getDescriptionSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetricsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_6_0, 
        		"STRING");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMetricsAccess().getDetailDetailParserRuleCall_6_0()); 
	    }
		lv_detail_7_0=ruleDetail		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMetricsRule());
	        }
       		set(
       			$current, 
       			"detail",
        		lv_detail_7_0, 
        		"Detail");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMetricsAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleDetail
entryRuleDetail returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDetailRule()); }
	 iv_ruleDetail=ruleDetail 
	 { $current=$iv_ruleDetail.current; } 
	 EOF 
;

// Rule Detail
ruleDetail returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDetailAccess().getTaskMetricParserRuleCall_0()); 
    }
    this_TaskMetric_0=ruleTaskMetric
    { 
        $current = $this_TaskMetric_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDetailAccess().getDataMetricParserRuleCall_1()); 
    }
    this_DataMetric_1=ruleDataMetric
    { 
        $current = $this_DataMetric_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTaskMetric
entryRuleTaskMetric returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskMetricRule()); }
	 iv_ruleTaskMetric=ruleTaskMetric 
	 { $current=$iv_ruleTaskMetric.current; } 
	 EOF 
;

// Rule TaskMetric
ruleTaskMetric returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTaskMetricAccess().getTaskMetricAction_0(),
            $current);
    }
)(	otherlv_1='taskBegin' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTaskMetricAccess().getTaskBeginKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskMetricRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTaskMetricAccess().getTaskBeginTaskCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_3='taskEnd' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTaskMetricAccess().getTaskEndKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskMetricRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTaskMetricAccess().getTaskEndTaskCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDataMetric
entryRuleDataMetric returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataMetricRule()); }
	 iv_ruleDataMetric=ruleDataMetric 
	 { $current=$iv_ruleDataMetric.current; } 
	 EOF 
;

// Rule DataMetric
ruleDataMetric returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDataMetricAccess().getDataMetricAction_0(),
            $current);
    }
)(	otherlv_1='collectedData' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataMetricAccess().getCollectedDataKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataMetricAccess().getCollectedDataCollectedDataParserRuleCall_1_1_0()); 
	    }
		lv_collectedData_2_0=ruleCollectedData		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataMetricRule());
	        }
       		add(
       			$current, 
       			"collectedData",
        		lv_collectedData_2_0, 
        		"CollectedData");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDataMetricAccess().getColonKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataMetricAccess().getDataTypeDataTypeEnumRuleCall_1_3_0()); 
	    }
		lv_dataType_4_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataMetricRule());
	        }
       		add(
       			$current, 
       			"dataType",
        		lv_dataType_4_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='artefact' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDataMetricAccess().getArtefactKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataMetricRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataMetricAccess().getArtefactsArtefactCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_7='quest' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDataMetricAccess().getQuestKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataMetricRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataMetricAccess().getQuestionnairesQuestionnaireCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleCollectedData
entryRuleCollectedData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectedDataRule()); }
	 iv_ruleCollectedData=ruleCollectedData 
	 { $current=$iv_ruleCollectedData.current; } 
	 EOF 
;

// Rule CollectedData
ruleCollectedData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getCollectedDataAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectedDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleQuestionnaire
entryRuleQuestionnaire returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionnaireRule()); }
	 iv_ruleQuestionnaire=ruleQuestionnaire 
	 { $current=$iv_ruleQuestionnaire.current; } 
	 EOF 
;

// Rule Questionnaire
ruleQuestionnaire returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Questionnaire' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuestionnaireAccess().getQuestionnaireKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getQuestionnaireAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionnaireRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='relates' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuestionnaireAccess().getRelatesKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionnaireRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getQuestionnaireAccess().getRelatesToProcessCrossReference_2_1_0()); 
	}

)
)*)?(	otherlv_4='type' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuestionnaireAccess().getTypeKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionnaireAccess().getQuestionnaireTypeQuestionnaireTypeEnumRuleCall_3_1_0()); 
	    }
		lv_questionnaireType_5_0=ruleQuestionnaireType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionnaireRule());
	        }
       		set(
       			$current, 
       			"questionnaireType",
        		lv_questionnaireType_5_0, 
        		"QuestionnaireType");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQuestionnaireAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionnaireAccess().getQuestionQuestionParserRuleCall_5_0()); 
	    }
		lv_question_7_0=ruleQuestion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionnaireRule());
	        }
       		add(
       			$current, 
       			"question",
        		lv_question_7_0, 
        		"Question");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='};' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getQuestionnaireAccess().getRightCurlyBracketSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	 iv_ruleQuestion=ruleQuestion 
	 { $current=$iv_ruleQuestion.current; } 
	 EOF 
;

// Rule Question
ruleQuestion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getQuestionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQuestionAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='description' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuestionAccess().getDescriptionKeyword_2_0());
    }
(
(
		lv_description_3_0=RULE_STRING
		{
			newLeafNode(lv_description_3_0, grammarAccess.getQuestionAccess().getDescriptionSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_3_0, 
        		"STRING");
	    }

)
))(	otherlv_4='type' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuestionAccess().getTypeKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionAccess().getTypeAnswerTypeEnumRuleCall_3_1_0()); 
	    }
		lv_type_5_0=ruleAnswerType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"AnswerType");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_6='required' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQuestionAccess().getRequiredKeyword_4_0());
    }
(
(
		lv_req_7_0=RULE_INT
		{
			newLeafNode(lv_req_7_0, grammarAccess.getQuestionAccess().getReqINTTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuestionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"req",
        		lv_req_7_0, 
        		"INT");
	    }

)
))?(	otherlv_8='Alternatives' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getQuestionAccess().getAlternativesKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuestionAccess().getAlternativesAlternativesParserRuleCall_5_1_0()); 
	    }
		lv_alternatives_9_0=ruleAlternatives		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuestionRule());
	        }
       		add(
       			$current, 
       			"alternatives",
        		lv_alternatives_9_0, 
        		"Alternatives");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getQuestionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleAlternatives
entryRuleAlternatives returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlternativesRule()); }
	 iv_ruleAlternatives=ruleAlternatives 
	 { $current=$iv_ruleAlternatives.current; } 
	 EOF 
;

// Rule Alternatives
ruleAlternatives returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Option' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAlternativesAccess().getOptionKeyword_0());
    }
(
(
		lv_description_1_0=RULE_STRING
		{
			newLeafNode(lv_description_1_0, grammarAccess.getAlternativesAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAlternativesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_1_0, 
        		"STRING");
	    }

)
))
;





// Rule RelationType
ruleRelationType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getRelationTypeAccess().getIsRelatedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationTypeAccess().getIsRelatedEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<>' 
	{
        $current = grammarAccess.getRelationTypeAccess().getIsNotRelatedEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationTypeAccess().getIsNotRelatedEnumLiteralDeclaration_1()); 
    }
));



// Rule OperatorType
ruleOperatorType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getOperatorTypeAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorTypeAccess().getEqualEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getOperatorTypeAccess().getDifferentEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorTypeAccess().getDifferentEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>' 
	{
        $current = grammarAccess.getOperatorTypeAccess().getMoreEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperatorTypeAccess().getMoreEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<' 
	{
        $current = grammarAccess.getOperatorTypeAccess().getLessEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperatorTypeAccess().getLessEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getOperatorTypeAccess().getMoreEqualEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperatorTypeAccess().getMoreEqualEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<=' 
	{
        $current = grammarAccess.getOperatorTypeAccess().getLessEqualEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getOperatorTypeAccess().getLessEqualEnumLiteralDeclaration_5()); 
    }
));



// Rule HypothesisType
ruleHypothesisType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='null_' 
	{
        $current = grammarAccess.getHypothesisTypeAccess().getNull_EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getHypothesisTypeAccess().getNull_EnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='alternative' 
	{
        $current = grammarAccess.getHypothesisTypeAccess().getAlternativeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getHypothesisTypeAccess().getAlternativeEnumLiteralDeclaration_1()); 
    }
));



// Rule DesignType
ruleDesignType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='CRD - Completely Randomized Design' 
	{
        $current = grammarAccess.getDesignTypeAccess().getCDREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDesignTypeAccess().getCDREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='RCBD - Randomized Complete Block Design' 
	{
        $current = grammarAccess.getDesignTypeAccess().getRCBDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDesignTypeAccess().getRCBDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='LS - Latin Square' 
	{
        $current = grammarAccess.getDesignTypeAccess().getLSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDesignTypeAccess().getLSEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Other' 
	{
        $current = grammarAccess.getDesignTypeAccess().getOtherEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDesignTypeAccess().getOtherEnumLiteralDeclaration_3()); 
    }
));



// Rule AnalysisTechiqueType
ruleAnalysisTechiqueType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Chi-2' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getChi2EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAnalysisTechiqueTypeAccess().getChi2EnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Binomial Test' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getBinomialTestEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAnalysisTechiqueTypeAccess().getBinomialTestEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='t-test' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getTTestEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAnalysisTechiqueTypeAccess().getTTestEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='F-test' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getFTestEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAnalysisTechiqueTypeAccess().getFTestEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='McNemar Test' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getMcNemarTestEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAnalysisTechiqueTypeAccess().getMcNemarTestEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Mann-Whitney' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getMannWhitneyEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAnalysisTechiqueTypeAccess().getMannWhitneyEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Paired t-test' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getPairedEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getAnalysisTechiqueTypeAccess().getPairedEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Wilcoxon' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getWilcoxonEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getAnalysisTechiqueTypeAccess().getWilcoxonEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='Sign test' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getSignTestEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getAnalysisTechiqueTypeAccess().getSignTestEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='ANOVA' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getAnovaEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getAnalysisTechiqueTypeAccess().getAnovaEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='Kruskal-Wallis' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getKruskalWallisEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getAnalysisTechiqueTypeAccess().getKruskalWallisEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='Others' 
	{
        $current = grammarAccess.getAnalysisTechiqueTypeAccess().getOthersEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getAnalysisTechiqueTypeAccess().getOthersEnumLiteralDeclaration_11()); 
    }
));



// Rule RoleType
ruleRoleType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Participant' 
	{
        $current = grammarAccess.getRoleTypeAccess().getParticipantEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRoleTypeAccess().getParticipantEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Researcher' 
	{
        $current = grammarAccess.getRoleTypeAccess().getResearcherEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRoleTypeAccess().getResearcherEnumLiteralDeclaration_1()); 
    }
));



// Rule ArtefactType
ruleArtefactType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='input' 
	{
        $current = grammarAccess.getArtefactTypeAccess().getIn_EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getArtefactTypeAccess().getIn_EnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='output' 
	{
        $current = grammarAccess.getArtefactTypeAccess().getOut_EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getArtefactTypeAccess().getOut_EnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='inoutput' 
	{
        $current = grammarAccess.getArtefactTypeAccess().getInout_EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getArtefactTypeAccess().getInout_EnumLiteralDeclaration_2()); 
    }
));



// Rule DataType
ruleDataType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='number' 
	{
        $current = grammarAccess.getDataTypeAccess().getNumEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataTypeAccess().getNumEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='text' 
	{
        $current = grammarAccess.getDataTypeAccess().getTextEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataTypeAccess().getTextEnumLiteralDeclaration_1()); 
    }
));



// Rule QuestionnaireType
ruleQuestionnaireType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Pre' 
	{
        $current = grammarAccess.getQuestionnaireTypeAccess().getPreEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getQuestionnaireTypeAccess().getPreEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Post' 
	{
        $current = grammarAccess.getQuestionnaireTypeAccess().getPostEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getQuestionnaireTypeAccess().getPostEnumLiteralDeclaration_1()); 
    }
));



// Rule AnswerType
ruleAnswerType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Text' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getTextEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAnswerTypeAccess().getTextEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='ParagraphText' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getParagraphTextEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAnswerTypeAccess().getParagraphTextEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='MultipleChoice' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getMultipleChoiceEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAnswerTypeAccess().getMultipleChoiceEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='SingleChoice' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getSingleChoiceEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAnswerTypeAccess().getSingleChoiceEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Scale' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getScaleEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAnswerTypeAccess().getScaleEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Grid' 
	{
        $current = grammarAccess.getAnswerTypeAccess().getGridEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAnswerTypeAccess().getGridEnumLiteralDeclaration_5()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


