grammar org.xtext.project.ExpDSL with org.eclipse.xtext.common.Terminals

generate expDSL "http://www.xtext.org/project/ExpDSL"

Model:
	(elements+=ExperimentElement)*;

ExperimentElement:
	'Experiment' name=STRING
	 process+=Process*
	 metrics+=Metrics*
	('Experimental Plan' experiments+=ExperimentalPlan*)?
	('Questionnaires' questionnaire+=Questionnaire*)?; 

//WorkbreakdownStructure	
Process:
	'Process' name=STRING '{'
	  (activities+=Activity)*
	'}';
	
Activity:
	'Activity'
	name=STRING
	description=STRING
	(next+=[Activity|STRING]*)?	
	(artefacts += Artefact*)?
	(role += Role*)?
	('{'
	 tasks+=Task*
	'}')?;
 
Task: 'Task' name=STRING 'description' description=STRING
      ('artefacts' artefacts += Artefact*)?
	  (role+=Role*)?';';

Role: 'Role' name=STRING';';

Artefact:
	'artefact' name = STRING 'description' description=STRING 'type' type=ArtefactType';';
	
	
enum ArtefactType returns ArtefactType:
	in_ = 'input' | out_ = 'output' | inout_ = 'inoutput';


//Metric Definition	
Metrics:
	'Metric' name=STRING 'relates' relatesTo=[Process|STRING] '{'
		('description' description=STRING)
		('form' form=ColectType)?
		('unit' unit=MetricUnit)?
		detail+=Detail
		'}';
		
Detail:
	(ActivityMetric|TaskMetric|ArtefactMetric);
	
ActivityMetric:
		('activityBegin' activityBegin=[Activity|STRING])
		('activityEnd' activityEnd=[Activity|STRING])?//opcional
       ;

TaskMetric:
	 'tasks' tasks+=[Task|STRING]*;
    
 ArtefactMetric:
   	 'artefacts' name=STRING  artefacts=[Artefact|STRING]*;

enum ColectType returns ColectType:
	continuous = 'continuous' | intercalated = 'intercalated';

enum MetricUnit returns MetricUnit:
	minutes = 'minutes' | uc = 'uc';
	
	
//CRD � Completely Randomized Design
//RCBD � Randomized Complete Block Design
//LS � Latin Square


ExperimentalPlan: 
'Design' name=STRING 'type' type=DesignType '{'
		(parameter+=Parameter)*
	    (factor+=Factor)*
	    'Internal Replication ' internalReplication=INT
	    (link+=Link)*
	'}';

Parameter:
	'Parameter' variable=STRING '=' value=STRING;

Factor: 
	'Factor' name=STRING 'isDesiredVariation' isDesiredVariation=('True'|'False') 
		(level+=Levels)* ';';
Levels:
	'Level' name=STRING ';';
	
Link: 'Link' procedure+=[Process|STRING] 'to' treatment+=[Levels|STRING]*;

enum DesignType returns DesignType:
	CDR = 'CRD - Completely Randomized Design' | 
	RCBD = 'RCBD - Randomized Complete Block Design' | 
	LS = 'LS - Latin Square';	

 
Questionnaire: 'Questionnaire' name=STRING ( 'relates' relatesTo+=[Process|STRING]*)? 
			   'type' (questionnaireType=QuestionnaireType) '{'
				
					(question+=Question)*
				
				'};';

enum QuestionnaireType returns QuestionnaireType:
	pre = 'Pre' | pos = 'Pos';
	
Question:
	name=STRING '{'
	    ('description' description=STRING)
		('type' type=AnswerType)
		('required' req=INT )?
		('Alternatives' alternatives+=Alternatives*)?  
	'}';

Alternatives:
	'Option' description = STRING;
	
enum AnswerType returns AnswerType:
	Text='Text' | ParagraphText = 'Paragraph Text' | MultipleChoice = 'Multiple Choice' 
	| ComboBox = 'ComboBox' | CheckBoxes = 'CheckBoxes' | Scale = 'Scale' | Grid = 'Grid';

//Experimental Design


// Metrica


	
